{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/favicon.jpg","path":"favicon.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"f9bf268ec411bacbb445a661e4d970655c6676fc","modified":1496658509260},{"_id":"source/favicon.ico","hash":"462d7599bc939bb9311293cd4a645d6e2bdb465f","modified":1496718037934},{"_id":"source/favicon.jpg","hash":"462d7599bc939bb9311293cd4a645d6e2bdb465f","modified":1496653638091},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1496652706386},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1496652706386},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1496652706386},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1496652706386},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1496652706386},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1496652706386},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1496652706386},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1496652706386},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1496652706386},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1496652706386},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1496652706386},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1496652706386},{"_id":"themes/next/_config.yml","hash":"c223b74b331741e209b0d201de580eeaa5e8385e","modified":1496719727861},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1496652706386},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1496652706386},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1496652706390},{"_id":"source/_posts/Werkzeug.md","hash":"23c0ce4ad0fbda4ebaff5fd0f7dee39951e7ab9a","modified":1496660687452},{"_id":"source/_posts/flask_g_request.md","hash":"ab1d202740b5b2c2e8e239a4ab2d942c37a6700f","modified":1496660687452},{"_id":"source/_posts/http.md","hash":"8b209298765958165b6f7ff69c910a00b9daf48c","modified":1496660687452},{"_id":"source/_posts/index.md","hash":"f8f3c0900113ab60bf085192c25dcb691319a086","modified":1496660687452},{"_id":"source/_posts/mylist.md","hash":"db0d4808927e935382ae96dcce7612440c04b665","modified":1496660687452},{"_id":"source/_posts/mysql.md","hash":"05c7cdf6974d64371c9416608ec27fe2e1006d26","modified":1496660687452},{"_id":"source/_posts/python_image.md","hash":"fbf93f5c9245fc49f6320093436a08a30a5826b2","modified":1496660687452},{"_id":"source/_posts/python_sort.md","hash":"269ee6b5eda50b0b482e56ab6b645f68854a659e","modified":1496660687452},{"_id":"source/about/index.md","hash":"0c369a0d7055cc5be34a78f5601d2f572b73fdaf","modified":1496660048461},{"_id":"source/categories/index.md","hash":"189610814e3be8730accda88e56e601cb24b57b8","modified":1496660687452},{"_id":"source/tags/index.md","hash":"16ef7571d9f4bce421ffb53851dd2e1c0c34fd4e","modified":1496657984927},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1496652706378},{"_id":"themes/next/.git/config","hash":"91b6a53b2a7f929b698734717a38d4ac169f0c1f","modified":1496652706382},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1496652689261},{"_id":"themes/next/.git/index","hash":"b8c0b3eb23aa56760925f4bb7d90bdb62310dd24","modified":1496653763285},{"_id":"themes/next/.git/packed-refs","hash":"a32afd28771f40635f4d5f53c889113239877db8","modified":1496652706378},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1496652706386},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1496652706386},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1496652706386},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1496652706386},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1496652706386},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1496652706386},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1496652706386},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1496652706386},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1496652706386},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1496652706386},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1496652706386},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1496652706386},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1496652706386},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1496652706390},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1496652706390},{"_id":"themes/next/layout/_layout.swig","hash":"9b5d0b2fb09c39e8812d977a94509f3b9a8a24dd","modified":1496658928584},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1496652706390},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1496652706390},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1496652706390},{"_id":"themes/next/layout/lean-analytics.wig","hash":"b686d07bdeaf90792521aa57515fa7ccfae01ab0","modified":1496661100152},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1496652706390},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1496652706390},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1496652706390},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1496652706390},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1496652706390},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1496652706390},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1496652706418},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1496652706418},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1496652706418},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496652706394},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1496652689261},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1496652689261},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1496652689261},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1496652689261},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1496652689261},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1496652689261},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1496652689261},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1496652689261},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1496652689261},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1496652689261},{"_id":"themes/next/.git/logs/HEAD","hash":"387b7073f21dbe0e98c5b5cae0b25c1543ce3d95","modified":1496652706378},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496652706390},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1496652706390},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1496652706390},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1496652706390},{"_id":"themes/next/layout/_macro/post.swig","hash":"f8dc2e9b12512514ef69e9a6f821fd48b92ae332","modified":1496661358173},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1496652706390},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a2b213c1a7c37cd6e4749f2018371f4c1f4f0d23","modified":1496652706390},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1496652706390},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1496652706390},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1496652706390},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1496652706390},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1496652706390},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1496652706390},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1496652706390},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1496652706390},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1496652706390},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1496652706390},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1496652706390},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1496652706390},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1496652706390},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1496652706390},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1496652706390},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1496652706390},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1496652706390},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1496652706390},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1496652706390},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1496652706390},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1496652706390},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1496652706390},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1496652706390},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1496652706390},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1496652706394},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1496652706394},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1496652706394},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1496652706394},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1496652706394},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1496652706394},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1496652706394},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1496652706398},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1496652706398},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1496652706398},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496652706398},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496652706398},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1496652706398},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1496652706398},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496652706398},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496652706390},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496652706390},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496652706394},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496652706394},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496652706394},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496652706394},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496652706394},{"_id":"themes/next/.git/refs/heads/master","hash":"53030aa0dab4693b7232641f37a6338b84e65281","modified":1496652706378},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1496652706390},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1496652706390},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1496652706390},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1496652706390},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1496652706390},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1496652706390},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1496652706390},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1496652706390},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1496652706390},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1496652706390},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1496652706390},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1496652706390},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1496652706390},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1496652706390},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1496652706390},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1496652706390},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1496652706390},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1496652706390},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1496652706390},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1496652706390},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1496652706390},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"1f349aa30dd1f7022f7d07a1f085eea5ace3f26d","modified":1496652706390},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1496652706390},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1496652706390},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1496652706394},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1496652706394},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1496652706394},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1496652706394},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1496652706394},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1496652706394},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496652706398},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496652706398},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496652706398},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496652706398},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496652706398},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1496652706398},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496652706398},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496652706398},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1496652706398},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496652706398},{"_id":"themes/next/source/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1496652706398},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496652706398},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496652706402},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1496652706402},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1496652706402},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1496652706402},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1496652706402},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1496652706402},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1496652706402},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1496652706402},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1496652706402},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1496652706402},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1496652706402},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1496652706410},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1496652706414},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1496652706414},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1496652706414},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1496652706414},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496652706414},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1496652706414},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1496652706414},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1496652706414},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1496652706414},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1496652706414},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1496652706418},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1496652706418},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496652706418},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496652706418},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496652706418},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496652706414},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"387b7073f21dbe0e98c5b5cae0b25c1543ce3d95","modified":1496652706378},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1496652706378},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1496652706390},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1496652706390},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1496652706390},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1496652706390},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1496652706390},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1496652706390},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1496652706390},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1496652706394},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1496652706394},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1496652706394},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1496652706394},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1496652706394},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1496652706394},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1496652706394},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496652706398},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1496652706398},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1496652706398},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496652706402},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496652706402},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496652706402},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496652706402},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1496652706402},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496652706406},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496652706418},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496652706418},{"_id":"themes/next/.git/objects/pack/pack-7e27b1b9ab01f1d8e6f6c1faa200a088e500cd60.idx","hash":"17a6471bd49f5a568f36ffae8aa9c30c45b4b7bc","modified":1496652706114},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1496652706398},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1496652706398},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496652706410},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496652706410},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496652706418},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"387b7073f21dbe0e98c5b5cae0b25c1543ce3d95","modified":1496652706378},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1496652706390},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1496652706394},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496652706394},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1496652706394},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1496652706398},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1496652706398},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1496652706398},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1496652706398},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496652706402},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496652706402},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496652706406},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496652706406},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496652706410},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496652706402},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496652706418},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496652706410},{"_id":"themes/next/.git/objects/pack/pack-7e27b1b9ab01f1d8e6f6c1faa200a088e500cd60.pack","hash":"056a646a132f9cc9a1c97cbeefe7dfe6715d894e","modified":1496652706114},{"_id":"public/404.html","hash":"789fb201e8a90e9c481db2c7779f01649da60cc6","modified":1496719538718},{"_id":"public/baidusitemap.xml","hash":"b111a5e869233faf3014f09bb091bbe3038fe23a","modified":1496719538735},{"_id":"public/search.xml","hash":"c93cb4c7b95813d15d3ef91aad20dc7f94e5b62e","modified":1496719538735},{"_id":"public/sitemap.xml","hash":"021754992074d47522853bc55093b6c04879ca97","modified":1496719538735},{"_id":"public/categories/index.html","hash":"f87e52db4c6fca7fa04f5bcfba9e9e9911781c8b","modified":1496719734655},{"_id":"public/tags/index.html","hash":"0ca0a464aac3af15612ce75d89e538eabe576bce","modified":1496719734655},{"_id":"public/archives/2016/09/index.html","hash":"3b1ebc6de66d228c515d4832261f4045f4ae2697","modified":1496719734657},{"_id":"public/categories/Http/index.html","hash":"7352039cc4a89ed2ca31c4ecfd7a9104a2399a95","modified":1496719734656},{"_id":"public/categories/Mysql/index.html","hash":"15f667e3c467d665c8ae0d52ac62c5579b5afde1","modified":1496719734656},{"_id":"public/tags/普通/index.html","hash":"65bd57b080f6b6fbdebd7bfe52e82feb7b373598","modified":1496719734656},{"_id":"public/about/index.html","hash":"34aa79b2321405c2a96230513bef2b09c84a09eb","modified":1496719734656},{"_id":"public/2017/06/05/Werkzeug/index.html","hash":"587d64ab6b40184ca2baf82774c74a22acf3df85","modified":1496719734656},{"_id":"public/2017/06/02/flask_g_request/index.html","hash":"e62786edb919c998e10ca4114859c1e18f366f80","modified":1496719734656},{"_id":"public/2017/05/27/http/index.html","hash":"f89f0bd324ebb0a20a9c0642ae4dc950bca1f94f","modified":1496719734656},{"_id":"public/2017/05/24/python_sort/index.html","hash":"2d3b14965dfb4cfc1f4755d7688d80194f891092","modified":1496719734656},{"_id":"public/2017/05/24/mylist/index.html","hash":"73f803f7295eae434c8ee1011717b58364271ed1","modified":1496719734657},{"_id":"public/2016/11/22/mysql/index.html","hash":"135315090fd97b628c047e8dd62d31a03570df14","modified":1496719734657},{"_id":"public/2016/11/18/python_image/index.html","hash":"dc9506c4a6fb97e325c7014bc1c8bffc2c1ade1e","modified":1496719734657},{"_id":"public/2016/09/18/index/index.html","hash":"8b1146fa430688ff053bd1fe593d5301badf205e","modified":1496719734657},{"_id":"public/archives/index.html","hash":"71b80ed7b082117e1d9d0f41be9cceee1c109bd4","modified":1496719734657},{"_id":"public/archives/2016/index.html","hash":"bd609d68e9b32b9e4614dcd9937a10455cf91aa4","modified":1496719734657},{"_id":"public/archives/2016/11/index.html","hash":"a30007b1805d03af539bf9e36dd078ed473ebb2d","modified":1496719734657},{"_id":"public/archives/2017/index.html","hash":"06c625dabd9359c3eb392fd3f9c9e8eb4b4e4d29","modified":1496719734657},{"_id":"public/archives/2017/05/index.html","hash":"26452e896be9abccd5ceee4f21e6363c5650e00d","modified":1496719734658},{"_id":"public/archives/2017/06/index.html","hash":"1f896a829e948c029ef6f185b1de436dfd5a1424","modified":1496719734658},{"_id":"public/categories/Python/index.html","hash":"4760fba3e9bfac58efec1e1ba6919fdd9b26ee82","modified":1496719734658},{"_id":"public/index.html","hash":"3284d0801258430e573d41c83fa39e46b5d8fd36","modified":1496719734658},{"_id":"public/tags/重点/index.html","hash":"053180e07f40936d0bafe8aab254b7e3ddb613a9","modified":1496719734659},{"_id":"public/favicon.ico","hash":"462d7599bc939bb9311293cd4a645d6e2bdb465f","modified":1496719538807},{"_id":"public/favicon.jpg","hash":"462d7599bc939bb9311293cd4a645d6e2bdb465f","modified":1496719538807},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1496719538807},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1496719538807},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1496719538807},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1496719538807},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1496719538807},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1496719538807},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1496719538807},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1496719538808},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1496719538808},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496719538808},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1496719538808},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1496719538808},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1496719538808},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1496719538808},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1496719538808},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1496719538808},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1496719538809},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1496719538809},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1496719538809},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1496719538809},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1496719538809},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1496719538809},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1496719538809},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1496719538809},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1496719538809},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1496719538809},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1496719538810},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1496719538810},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1496719540016},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1496719540036},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1496719540076},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1496719540076},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1496719540076},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1496719540076},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1496719540076},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1496719540076},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1496719540076},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1496719540076},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1496719540076},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1496719540076},{"_id":"public/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1496719540077},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1496719540077},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1496719540077},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1496719540077},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1496719540077},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1496719540077},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1496719540077},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1496719540077},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1496719540077},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1496719540077},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1496719540077},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1496719540078},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1496719540079},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1496719540079},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1496719540079},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1496719540079},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1496719540079},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1496719540079},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1496719540079},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1496719540079},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1496719540079},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1496719540079},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1496719540079},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1496719540080},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1496719540080},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1496719540080},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1496719540080},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1496719540080},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1496719540080},{"_id":"public/css/main.css","hash":"377000ab31bcc8db701d0597ed541ad2688921c5","modified":1496719540080},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1496719540080},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1496719540080},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1496719540080},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1496719540081},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1496719540081},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1496719540081},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1496719540081},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1496719540081},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1496719540081},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1496719540081},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1496719540081},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1496719540081},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1496719540081},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1496719540082},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1496719540082},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1496719540082},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1496719540082},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1496719540082},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1496719540082},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1496719540082},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1496719540083},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1496719540112}],"Category":[{"name":"Python","_id":"cj3l060xd0005nzy6fbx8ql5a"},{"name":"Http","_id":"cj3l060y0000inzy68kj6lugk"},{"name":"Mysql","_id":"cj3l060y6000qnzy656kj76bf"}],"Data":[],"Page":[{"layout":"false","title":"404","date":"2016-01-08T06:51:00.000Z","_content":"<!DOCTYPE HTML>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<meta name=\"robots\" content=\"all\" />\n<meta name=\"robots\" content=\"index,follow\"/>\n<title>公益404页面 // 夏明的博客</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://xiaming.com.cn\" homePageName=\"夏明的博客\"></script>\n</body>\n</html>\n","source":"404.html","raw":"layout: false\ntitle: \"404\"\ndate: 2016-01-08 14:50:60\npermalink: /404.html\n---\n<!DOCTYPE HTML>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n<meta name=\"robots\" content=\"all\" />\n<meta name=\"robots\" content=\"index,follow\"/>\n<title>公益404页面 // 夏明的博客</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://xiaming.com.cn\" homePageName=\"夏明的博客\"></script>\n</body>\n</html>\n","updated":"2017-06-05T10:28:29.260Z","path":"/404.html","comments":1,"_id":"cj3l060lq0000nzy698nxbnnb","content":"<!DOCTYPE HTML>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"robots\" content=\"all\">\n<meta name=\"robots\" content=\"index,follow\">\n<title>公益404页面 // 夏明的博客</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://xiaming.com.cn\" homepagename=\"夏明的博客\"></script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"robots\" content=\"all\">\n<meta name=\"robots\" content=\"index,follow\">\n<title>公益404页面 // 夏明的博客</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://xiaming.com.cn\" homepagename=\"夏明的博客\"></script>\n</body>\n</html>\n"},{"title":"about","date":"2017-06-05T10:50:47.000Z","_content":"\n### 博主简历\n\n> 北漂，python程序员，毕业于[北京工商大学](http://www.btbu.edu.cn)，2011级，现就职于[微车](http://weiche.me)\n> 平时喜欢玩游戏，LOL、PS4、桌游都比较爱玩。\n> 在这里我会分享一些平时遇到的一些技术问题和解决方案，还有希望大家有问题联系我，多多交流\n\n### 我和PYTHON\n\n> 大学的时候，学的主要的两门语言是C和JAVA，这个可能是很多学计算机的同学都会学习的两门语言，火热程度上来说，JAVA肯定是用的最多的，C也很多。说道和PYTHON的事情的，首先是感谢当时的一位老师，被邀请到她实验室做项目，顺手就开始学习PYTHON，PYTHON简单容易上手，但是也很有深度。\n> 大学时候再赵老师实验室跟着做的一个东西,地址:[数字标牌广告即时排期算法的研究](http://archive.artnchina.com/KCMS/detail/detail.aspx?filename=DNZS201426072&dbcode=CJFD&dbname=CJFD2014)\n\n### 做个小项目\n\n> 一个验证码的小项目[captcha_crack](https://github.com/kouyalong/captcha_crack), 访问[demo](http://crack.micbay.com)就可以看见demo详情\n> 最近想着自己做一个小项目，苦于自己对JS、H5的不够熟悉，所以要是有意向的同学，联系我QQ：1029670389\n\n### 微信公众号: 九点三刻micbay\n\n> 扫描二维码关注![](https://martin-upload.b0.upaiyun.com/web/2017/05/1cb89e5695f1c44a2ccf2896c1231603.jpg)\n\n### 吾爱PYTHON 二群\n\n> 474916408, 欢迎加入!!!\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-06-05 18:50:47\n---\n\n### 博主简历\n\n> 北漂，python程序员，毕业于[北京工商大学](http://www.btbu.edu.cn)，2011级，现就职于[微车](http://weiche.me)\n> 平时喜欢玩游戏，LOL、PS4、桌游都比较爱玩。\n> 在这里我会分享一些平时遇到的一些技术问题和解决方案，还有希望大家有问题联系我，多多交流\n\n### 我和PYTHON\n\n> 大学的时候，学的主要的两门语言是C和JAVA，这个可能是很多学计算机的同学都会学习的两门语言，火热程度上来说，JAVA肯定是用的最多的，C也很多。说道和PYTHON的事情的，首先是感谢当时的一位老师，被邀请到她实验室做项目，顺手就开始学习PYTHON，PYTHON简单容易上手，但是也很有深度。\n> 大学时候再赵老师实验室跟着做的一个东西,地址:[数字标牌广告即时排期算法的研究](http://archive.artnchina.com/KCMS/detail/detail.aspx?filename=DNZS201426072&dbcode=CJFD&dbname=CJFD2014)\n\n### 做个小项目\n\n> 一个验证码的小项目[captcha_crack](https://github.com/kouyalong/captcha_crack), 访问[demo](http://crack.micbay.com)就可以看见demo详情\n> 最近想着自己做一个小项目，苦于自己对JS、H5的不够熟悉，所以要是有意向的同学，联系我QQ：1029670389\n\n### 微信公众号: 九点三刻micbay\n\n> 扫描二维码关注![](https://martin-upload.b0.upaiyun.com/web/2017/05/1cb89e5695f1c44a2ccf2896c1231603.jpg)\n\n### 吾爱PYTHON 二群\n\n> 474916408, 欢迎加入!!!\n","updated":"2017-06-05T10:54:08.461Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3l060x60002nzy67iocgbg5","content":"<h3 id=\"博主简历\"><a href=\"#博主简历\" class=\"headerlink\" title=\"博主简历\"></a>博主简历</h3><blockquote>\n<p>北漂，python程序员，毕业于<a href=\"http://www.btbu.edu.cn\" target=\"_blank\" rel=\"external\">北京工商大学</a>，2011级，现就职于<a href=\"http://weiche.me\" target=\"_blank\" rel=\"external\">微车</a><br>平时喜欢玩游戏，LOL、PS4、桌游都比较爱玩。<br>在这里我会分享一些平时遇到的一些技术问题和解决方案，还有希望大家有问题联系我，多多交流</p>\n</blockquote>\n<h3 id=\"我和PYTHON\"><a href=\"#我和PYTHON\" class=\"headerlink\" title=\"我和PYTHON\"></a>我和PYTHON</h3><blockquote>\n<p>大学的时候，学的主要的两门语言是C和JAVA，这个可能是很多学计算机的同学都会学习的两门语言，火热程度上来说，JAVA肯定是用的最多的，C也很多。说道和PYTHON的事情的，首先是感谢当时的一位老师，被邀请到她实验室做项目，顺手就开始学习PYTHON，PYTHON简单容易上手，但是也很有深度。<br>大学时候再赵老师实验室跟着做的一个东西,地址:<a href=\"http://archive.artnchina.com/KCMS/detail/detail.aspx?filename=DNZS201426072&amp;dbcode=CJFD&amp;dbname=CJFD2014\" target=\"_blank\" rel=\"external\">数字标牌广告即时排期算法的研究</a></p>\n</blockquote>\n<h3 id=\"做个小项目\"><a href=\"#做个小项目\" class=\"headerlink\" title=\"做个小项目\"></a>做个小项目</h3><blockquote>\n<p>一个验证码的小项目<a href=\"https://github.com/kouyalong/captcha_crack\" target=\"_blank\" rel=\"external\">captcha_crack</a>, 访问<a href=\"http://crack.micbay.com\" target=\"_blank\" rel=\"external\">demo</a>就可以看见demo详情<br>最近想着自己做一个小项目，苦于自己对JS、H5的不够熟悉，所以要是有意向的同学，联系我QQ：1029670389</p>\n</blockquote>\n<h3 id=\"微信公众号-九点三刻micbay\"><a href=\"#微信公众号-九点三刻micbay\" class=\"headerlink\" title=\"微信公众号: 九点三刻micbay\"></a>微信公众号: 九点三刻micbay</h3><blockquote>\n<p>扫描二维码关注<img src=\"https://martin-upload.b0.upaiyun.com/web/2017/05/1cb89e5695f1c44a2ccf2896c1231603.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"吾爱PYTHON-二群\"><a href=\"#吾爱PYTHON-二群\" class=\"headerlink\" title=\"吾爱PYTHON 二群\"></a>吾爱PYTHON 二群</h3><blockquote>\n<p>474916408, 欢迎加入!!!</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"博主简历\"><a href=\"#博主简历\" class=\"headerlink\" title=\"博主简历\"></a>博主简历</h3><blockquote>\n<p>北漂，python程序员，毕业于<a href=\"http://www.btbu.edu.cn\" target=\"_blank\" rel=\"external\">北京工商大学</a>，2011级，现就职于<a href=\"http://weiche.me\" target=\"_blank\" rel=\"external\">微车</a><br>平时喜欢玩游戏，LOL、PS4、桌游都比较爱玩。<br>在这里我会分享一些平时遇到的一些技术问题和解决方案，还有希望大家有问题联系我，多多交流</p>\n</blockquote>\n<h3 id=\"我和PYTHON\"><a href=\"#我和PYTHON\" class=\"headerlink\" title=\"我和PYTHON\"></a>我和PYTHON</h3><blockquote>\n<p>大学的时候，学的主要的两门语言是C和JAVA，这个可能是很多学计算机的同学都会学习的两门语言，火热程度上来说，JAVA肯定是用的最多的，C也很多。说道和PYTHON的事情的，首先是感谢当时的一位老师，被邀请到她实验室做项目，顺手就开始学习PYTHON，PYTHON简单容易上手，但是也很有深度。<br>大学时候再赵老师实验室跟着做的一个东西,地址:<a href=\"http://archive.artnchina.com/KCMS/detail/detail.aspx?filename=DNZS201426072&amp;dbcode=CJFD&amp;dbname=CJFD2014\" target=\"_blank\" rel=\"external\">数字标牌广告即时排期算法的研究</a></p>\n</blockquote>\n<h3 id=\"做个小项目\"><a href=\"#做个小项目\" class=\"headerlink\" title=\"做个小项目\"></a>做个小项目</h3><blockquote>\n<p>一个验证码的小项目<a href=\"https://github.com/kouyalong/captcha_crack\" target=\"_blank\" rel=\"external\">captcha_crack</a>, 访问<a href=\"http://crack.micbay.com\" target=\"_blank\" rel=\"external\">demo</a>就可以看见demo详情<br>最近想着自己做一个小项目，苦于自己对JS、H5的不够熟悉，所以要是有意向的同学，联系我QQ：1029670389</p>\n</blockquote>\n<h3 id=\"微信公众号-九点三刻micbay\"><a href=\"#微信公众号-九点三刻micbay\" class=\"headerlink\" title=\"微信公众号: 九点三刻micbay\"></a>微信公众号: 九点三刻micbay</h3><blockquote>\n<p>扫描二维码关注<img src=\"https://martin-upload.b0.upaiyun.com/web/2017/05/1cb89e5695f1c44a2ccf2896c1231603.jpg\" alt=\"\"></p>\n</blockquote>\n<h3 id=\"吾爱PYTHON-二群\"><a href=\"#吾爱PYTHON-二群\" class=\"headerlink\" title=\"吾爱PYTHON 二群\"></a>吾爱PYTHON 二群</h3><blockquote>\n<p>474916408, 欢迎加入!!!</p>\n</blockquote>\n"},{"title":"categories","date":"2017-06-05T10:59:03.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-05 18:59:03\ntype: \"categories\"\n\n---\n","updated":"2017-06-05T11:04:47.452Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj3l060xa0004nzy61zx8vlx9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-06-05T10:19:01.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-05 18:19:01\ntype: \"tags\"\ncomments: true\n---\n","updated":"2017-06-05T10:19:44.927Z","path":"tags/index.html","layout":"page","_id":"cj3l060xh0008nzy6qkzigyea","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"Werkzeug","title":"Werkzeug库简介","date":"2017-06-05T06:50:11.000Z","comments":1,"_content":"\n### Werkzeug 库简介\n\nWerkzeug 并不是一个框架, 它是一个WSGI工具集的库, 你可以通过它来创建自己的框架或者应用, Werkzeug是非常灵活的, 希望这篇文章对你有所帮助.\n\nWSGI(Web Server Gateway Interface)是WEB服务器和web框架或web应用之间建立的一种简单通用的接口协议.\n\nWerkzeug遵循WSGI的规范, 下面是一个简单的例子:\n```python\n#!/usr/bin/env python\n# coding: utf-8\n\nfrom werkzeug.wrappers import Request, Response\n\n\ndef my_app_version1(environ, start_response):\n    \"\"\"\n    在没有werkzeug的帮助的话, 使用WSGI实现一个简单Web看起来是这样的\n    :param environ: 包含了所有进来的信息\n    :param start_response: 用来表明收到一个响应\n    :return:\n    \"\"\"\n    query_string = environ.get('QUERY_STRING')\n    name = 'Man'\n    if query_string:\n        name = query_string.split('=')[1]\n    start_response('200 OK', [('Content-Type', 'text/plain')])\n    return 'Hello %s, This is My App Version 0.1' % name\n\n\ndef my_app_version2(environ, start_response):\n    \"\"\"\n    使用了Werkzeug 所提供的Request和Response, \n    你就不需要自己去直接去处理提交上来的请求(request)和响应(response)\n    :param environ:\n    :param start_response:\n    :return:\n    \"\"\"\n    request = Request(environ)\n    response = Response('Hello %s, This is My App Version 0.2' %\n                        request.args.get('name', 'Man'))\n    return response(environ, start_response)\n\n\nif __name__ == '__main__':\n    from werkzeug.serving import run_simple\n    run_simple('localhost', 5011, my_app_version1)\n    # run_simple('localhost', 5012, my_app_version2)\n```\n\n### 用Werkzeug构建一个简单的应用\n\n```python\nclass SimpleFlask(object):\n\n    def __init__(self, name):\n        self.name = name\n        self.rv = Response\n\n    def dispatch_request(self, request):\n        return self.rv('Hello %s, This is SimpleFlask' %\n                       request.args.get('name', 'Man'))\n\n    def wsgi_app(self, environ, start_reponse):\n        request = Request(environ)\n        response = self.dispatch_request(request)\n        return response(environ, start_reponse)\n\n    def __call__(self, environ, start_response):\n        return self.wsgi_app(environ, start_response)\n\n\ndef create_app():\n    app = SimpleFlask(__name__)\n    return app\n\n\nif __name__ == '__main__':\n    from werkzeug.serving import run_simple\n    simple_app = create_app()\n    run_simple('localhost', 5012, simple_app)\n```\n","source":"_posts/Werkzeug.md","raw":"layout: Werkzeug\ntitle: Werkzeug库简介\ndate: 2017-06-05 14:50:11\ntags: 重点\ncomments: true\ncategories: Python\n\n---\n\n### Werkzeug 库简介\n\nWerkzeug 并不是一个框架, 它是一个WSGI工具集的库, 你可以通过它来创建自己的框架或者应用, Werkzeug是非常灵活的, 希望这篇文章对你有所帮助.\n\nWSGI(Web Server Gateway Interface)是WEB服务器和web框架或web应用之间建立的一种简单通用的接口协议.\n\nWerkzeug遵循WSGI的规范, 下面是一个简单的例子:\n```python\n#!/usr/bin/env python\n# coding: utf-8\n\nfrom werkzeug.wrappers import Request, Response\n\n\ndef my_app_version1(environ, start_response):\n    \"\"\"\n    在没有werkzeug的帮助的话, 使用WSGI实现一个简单Web看起来是这样的\n    :param environ: 包含了所有进来的信息\n    :param start_response: 用来表明收到一个响应\n    :return:\n    \"\"\"\n    query_string = environ.get('QUERY_STRING')\n    name = 'Man'\n    if query_string:\n        name = query_string.split('=')[1]\n    start_response('200 OK', [('Content-Type', 'text/plain')])\n    return 'Hello %s, This is My App Version 0.1' % name\n\n\ndef my_app_version2(environ, start_response):\n    \"\"\"\n    使用了Werkzeug 所提供的Request和Response, \n    你就不需要自己去直接去处理提交上来的请求(request)和响应(response)\n    :param environ:\n    :param start_response:\n    :return:\n    \"\"\"\n    request = Request(environ)\n    response = Response('Hello %s, This is My App Version 0.2' %\n                        request.args.get('name', 'Man'))\n    return response(environ, start_response)\n\n\nif __name__ == '__main__':\n    from werkzeug.serving import run_simple\n    run_simple('localhost', 5011, my_app_version1)\n    # run_simple('localhost', 5012, my_app_version2)\n```\n\n### 用Werkzeug构建一个简单的应用\n\n```python\nclass SimpleFlask(object):\n\n    def __init__(self, name):\n        self.name = name\n        self.rv = Response\n\n    def dispatch_request(self, request):\n        return self.rv('Hello %s, This is SimpleFlask' %\n                       request.args.get('name', 'Man'))\n\n    def wsgi_app(self, environ, start_reponse):\n        request = Request(environ)\n        response = self.dispatch_request(request)\n        return response(environ, start_reponse)\n\n    def __call__(self, environ, start_response):\n        return self.wsgi_app(environ, start_response)\n\n\ndef create_app():\n    app = SimpleFlask(__name__)\n    return app\n\n\nif __name__ == '__main__':\n    from werkzeug.serving import run_simple\n    simple_app = create_app()\n    run_simple('localhost', 5012, simple_app)\n```\n","slug":"Werkzeug","published":1,"updated":"2017-06-05T11:04:47.452Z","photos":[],"link":"","_id":"cj3l060wk0001nzy6w9tcp15s","content":"<h3 id=\"Werkzeug-库简介\"><a href=\"#Werkzeug-库简介\" class=\"headerlink\" title=\"Werkzeug 库简介\"></a>Werkzeug 库简介</h3><p>Werkzeug 并不是一个框架, 它是一个WSGI工具集的库, 你可以通过它来创建自己的框架或者应用, Werkzeug是非常灵活的, 希望这篇文章对你有所帮助.</p>\n<p>WSGI(Web Server Gateway Interface)是WEB服务器和web框架或web应用之间建立的一种简单通用的接口协议.</p>\n<p>Werkzeug遵循WSGI的规范, 下面是一个简单的例子:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> werkzeug.wrappers <span class=\"keyword\">import</span> Request, Response</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_app_version1</span><span class=\"params\">(environ, start_response)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    在没有werkzeug的帮助的话, 使用WSGI实现一个简单Web看起来是这样的</div><div class=\"line\">    :param environ: 包含了所有进来的信息</div><div class=\"line\">    :param start_response: 用来表明收到一个响应</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    query_string = environ.get(<span class=\"string\">'QUERY_STRING'</span>)</div><div class=\"line\">    name = <span class=\"string\">'Man'</span></div><div class=\"line\">    <span class=\"keyword\">if</span> query_string:</div><div class=\"line\">        name = query_string.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    start_response(<span class=\"string\">'200 OK'</span>, [(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)])</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello %s, This is My App Version 0.1'</span> % name</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_app_version2</span><span class=\"params\">(environ, start_response)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    使用了Werkzeug 所提供的Request和Response, </div><div class=\"line\">    你就不需要自己去直接去处理提交上来的请求(request)和响应(response)</div><div class=\"line\">    :param environ:</div><div class=\"line\">    :param start_response:</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    request = Request(environ)</div><div class=\"line\">    response = Response(<span class=\"string\">'Hello %s, This is My App Version 0.2'</span> %</div><div class=\"line\">                        request.args.get(<span class=\"string\">'name'</span>, <span class=\"string\">'Man'</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> response(environ, start_response)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</div><div class=\"line\">    run_simple(<span class=\"string\">'localhost'</span>, <span class=\"number\">5011</span>, my_app_version1)</div><div class=\"line\">    <span class=\"comment\"># run_simple('localhost', 5012, my_app_version2)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"用Werkzeug构建一个简单的应用\"><a href=\"#用Werkzeug构建一个简单的应用\" class=\"headerlink\" title=\"用Werkzeug构建一个简单的应用\"></a>用Werkzeug构建一个简单的应用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFlask</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.rv = Response</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dispatch_request</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.rv(<span class=\"string\">'Hello %s, This is SimpleFlask'</span> %</div><div class=\"line\">                       request.args.get(<span class=\"string\">'name'</span>, <span class=\"string\">'Man'</span>))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wsgi_app</span><span class=\"params\">(self, environ, start_reponse)</span>:</span></div><div class=\"line\">        request = Request(environ)</div><div class=\"line\">        response = self.dispatch_request(request)</div><div class=\"line\">        <span class=\"keyword\">return</span> response(environ, start_reponse)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, environ, start_response)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.wsgi_app(environ, start_response)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_app</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    app = SimpleFlask(__name__)</div><div class=\"line\">    <span class=\"keyword\">return</span> app</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</div><div class=\"line\">    simple_app = create_app()</div><div class=\"line\">    run_simple(<span class=\"string\">'localhost'</span>, <span class=\"number\">5012</span>, simple_app)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Werkzeug-库简介\"><a href=\"#Werkzeug-库简介\" class=\"headerlink\" title=\"Werkzeug 库简介\"></a>Werkzeug 库简介</h3><p>Werkzeug 并不是一个框架, 它是一个WSGI工具集的库, 你可以通过它来创建自己的框架或者应用, Werkzeug是非常灵活的, 希望这篇文章对你有所帮助.</p>\n<p>WSGI(Web Server Gateway Interface)是WEB服务器和web框架或web应用之间建立的一种简单通用的接口协议.</p>\n<p>Werkzeug遵循WSGI的规范, 下面是一个简单的例子:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> werkzeug.wrappers <span class=\"keyword\">import</span> Request, Response</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_app_version1</span><span class=\"params\">(environ, start_response)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    在没有werkzeug的帮助的话, 使用WSGI实现一个简单Web看起来是这样的</div><div class=\"line\">    :param environ: 包含了所有进来的信息</div><div class=\"line\">    :param start_response: 用来表明收到一个响应</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    query_string = environ.get(<span class=\"string\">'QUERY_STRING'</span>)</div><div class=\"line\">    name = <span class=\"string\">'Man'</span></div><div class=\"line\">    <span class=\"keyword\">if</span> query_string:</div><div class=\"line\">        name = query_string.split(<span class=\"string\">'='</span>)[<span class=\"number\">1</span>]</div><div class=\"line\">    start_response(<span class=\"string\">'200 OK'</span>, [(<span class=\"string\">'Content-Type'</span>, <span class=\"string\">'text/plain'</span>)])</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello %s, This is My App Version 0.1'</span> % name</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_app_version2</span><span class=\"params\">(environ, start_response)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"</span></div><div class=\"line\">    使用了Werkzeug 所提供的Request和Response, </div><div class=\"line\">    你就不需要自己去直接去处理提交上来的请求(request)和响应(response)</div><div class=\"line\">    :param environ:</div><div class=\"line\">    :param start_response:</div><div class=\"line\">    :return:</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    request = Request(environ)</div><div class=\"line\">    response = Response(<span class=\"string\">'Hello %s, This is My App Version 0.2'</span> %</div><div class=\"line\">                        request.args.get(<span class=\"string\">'name'</span>, <span class=\"string\">'Man'</span>))</div><div class=\"line\">    <span class=\"keyword\">return</span> response(environ, start_response)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</div><div class=\"line\">    run_simple(<span class=\"string\">'localhost'</span>, <span class=\"number\">5011</span>, my_app_version1)</div><div class=\"line\">    <span class=\"comment\"># run_simple('localhost', 5012, my_app_version2)</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"用Werkzeug构建一个简单的应用\"><a href=\"#用Werkzeug构建一个简单的应用\" class=\"headerlink\" title=\"用Werkzeug构建一个简单的应用\"></a>用Werkzeug构建一个简单的应用</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleFlask</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.rv = Response</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dispatch_request</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.rv(<span class=\"string\">'Hello %s, This is SimpleFlask'</span> %</div><div class=\"line\">                       request.args.get(<span class=\"string\">'name'</span>, <span class=\"string\">'Man'</span>))</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wsgi_app</span><span class=\"params\">(self, environ, start_reponse)</span>:</span></div><div class=\"line\">        request = Request(environ)</div><div class=\"line\">        response = self.dispatch_request(request)</div><div class=\"line\">        <span class=\"keyword\">return</span> response(environ, start_reponse)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, environ, start_response)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.wsgi_app(environ, start_response)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_app</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    app = SimpleFlask(__name__)</div><div class=\"line\">    <span class=\"keyword\">return</span> app</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"keyword\">from</span> werkzeug.serving <span class=\"keyword\">import</span> run_simple</div><div class=\"line\">    simple_app = create_app()</div><div class=\"line\">    run_simple(<span class=\"string\">'localhost'</span>, <span class=\"number\">5012</span>, simple_app)</div></pre></td></tr></table></figure>\n"},{"layout":"flask_g_request_layout","title":"Flask学习笔记第一篇之上下文","date":"2017-06-02T05:26:05.000Z","comments":1,"_content":"\n本文只是记录个人学习Flask上下文的一些理解. 关于上下文的理解和更多的信息, 可以参考最下方的参考文献!\nFlask 中有两种上下文 请求上下文和应用上下文. \n\n#### Werkzeug 实现的 Local Stack 和 Local Proxy\n\n在了解Flask 上下文之前, 必须得先了解Werkzeug.local.Local\n\nWerkzeug 实现了一个Local类, 类似于ThreadLocal.\n\n首先我们看看ThreadLocal. ThreadLocal则是一种特殊的对象, 它的\"状态\"对线程隔离——也就是说每个线程对一个ThreadLocal对象的修改都不会影响其他线程. \n\nThreadLocal的内部实现:\n\n```python\nclass _local(object):\n    \"\"\" Thread-local data \"\"\"\n    def __delattr__(self, name): # real signature unknown; restored from __doc__\n        \"\"\" x.__delattr__('name') <==> del x.name \"\"\"\n        pass\n\n    def __getattribute__(self, name): # real signature unknown; restored from __doc__\n        \"\"\" x.__getattribute__('name') <==> x.name \"\"\"\n        pass\n\n    def __init__(self, *args, **kwargs): # real signature unknown\n        pass\n\n    @staticmethod # known case of __new__\n    def __new__(S, *more): # real signature unknown; restored from __doc__\n        \"\"\" T.__new__(S, ...) -> a new object with type S, a subtype of T \"\"\"\n        pass\n\n    def __setattr__(self, name, value): # real signature unknown; restored from __doc__\n        \"\"\" x.__setattr__('name', value) <==> x.name = value \"\"\"\n        pass\n\n```\n\nThreadLocal Demo:\n\n```python\n#!/usr/bin/env python\n# coding: utf-8\n\nimport threading\n\n\nthread_local = threading.local()\nthread_local.main_id = 0\n\nprint thread_local.main_id     # 主线程里面, 打印结果为0\n\n\nclass AppThread(threading.Thread):\n    num = 0\n\n    def set_num(self, num):\n        self.num = num\n\n    def run(self):\n        thread_local.main_id = self.num\n        print thread_local.main_id      # 在这个线程里面, 修改mian_id值\n\n\napp_thread = AppThread()\napp_thread.set_num(4)\napp_thread.start()\nprint thread_local.main_id      # 主线程 main_id 没有改变\n\n```\nWerkzeug.local.Local类\n* Werkzeug.local.Local会在Greenlet可用的情况下优先使用Greenlet的ID而不是线程ID以支持Gevent或Eventlet的调度; ThreadLocal只支持多线程调度\n* Werkzeug.local.Local实现的__release_local__的方法, 可以被release_local函数释放掉当前线程下的状态, 源码中有Example\n\n```python\ndef release_local(local):\n    \"\"\"Releases the contents of the local for the current context.\n    This makes it possible to use locals without a manager.\n\n    Example::\n\n        >>> loc = Local()\n        >>> loc.foo = 42\n        >>> release_local(loc)\n        >>> hasattr(loc, 'foo')\n        False\n\n    With this function one can release :class:`Local` objects as well\n    as :class:`LocalStack` objects.  However it is not possible to\n    release data held by proxies that way, one always has to retain\n    a reference to the underlying local object in order to be able\n    to release it.\n\n    .. versionadded:: 0.6.1\n    \"\"\"\n    local.__release_local__()\n\n\nclass Local(object):\n    __slots__ = ('__storage__', '__ident_func__')\n\n    def __init__(self):\n        object.__setattr__(self, '__storage__', {})\n        object.__setattr__(self, '__ident_func__', get_ident)\n\n    def __iter__(self):\n        return iter(self.__storage__.items())\n\n    def __call__(self, proxy):\n        \"\"\"Create a proxy for a name.\"\"\"\n        return LocalProxy(self, proxy)\n\n    def __release_local__(self):\n        self.__storage__.pop(self.__ident_func__(), None)\n\n    def __getattr__(self, name):\n        try:\n            return self.__storage__[self.__ident_func__()][name]\n        except KeyError:\n            raise AttributeError(name)\n\n    def __setattr__(self, name, value):\n        ident = self.__ident_func__()\n        storage = self.__storage__\n        try:\n            storage[ident][name] = value\n        except KeyError:\n            storage[ident] = {name: value}\n\n    def __delattr__(self, name):\n        try:\n            del self.__storage__[self.__ident_func__()][name]\n        except KeyError:\n            raise AttributeError(name)\n```\n\n接下来我们来看看Werkzeug实现的LocalStack 和 LocalProxy\n\nLocalStack是用Werkzeug.local.Local实现的stack结构, 实现了pop, push以及top(快速拿到栈顶元素)等方法, 这些所有的操作都只在本线程可见.\nLocaLStack也可以被release_local函数释放掉当前线程下的状态(它也实现了__release_local__方法)\n```python\nclass LocalStack(object):\n\n    \"\"\"This class works similar to a :class:`Local` but keeps a stack\n    of objects instead.  This is best explained with an example::\n\n        >>> ls = LocalStack()\n        >>> ls.push(42)\n        >>> ls.top\n        42\n        >>> ls.push(23)\n        >>> ls.top\n        23\n        >>> ls.pop()\n        23\n        >>> ls.top\n        42\n\n    They can be force released by using a :class:`LocalManager` or with\n    the :func:`release_local` function but the correct way is to pop the\n    item from the stack after using.  When the stack is empty it will\n    no longer be bound to the current context (and as such released).\n\n    By calling the stack without arguments it returns a proxy that resolves to\n    the topmost item on the stack.\n\n    .. versionadded:: 0.6.1\n    \"\"\"\n\n    def __init__(self):\n        self._local = Local()\n\n    def __release_local__(self):\n        self._local.__release_local__()\n\n    def _get__ident_func__(self):\n        return self._local.__ident_func__\n\n    def _set__ident_func__(self, value):\n        object.__setattr__(self._local, '__ident_func__', value)\n    __ident_func__ = property(_get__ident_func__, _set__ident_func__)\n    del _get__ident_func__, _set__ident_func__\n\n    def __call__(self):\n        def _lookup():\n            rv = self.top\n            if rv is None:\n                raise RuntimeError('object unbound')\n            return rv\n        return LocalProxy(_lookup)\n\n    def push(self, obj):\n        \"\"\"Pushes a new item to the stack\"\"\"\n        rv = getattr(self._local, 'stack', None)\n        if rv is None:\n            self._local.stack = rv = []\n        rv.append(obj)\n        return rv\n\n    def pop(self):\n        \"\"\"Removes the topmost item from the stack, will return the\n        old value or `None` if the stack was already empty.\n        \"\"\"\n        stack = getattr(self._local, 'stack', None)\n        if stack is None:\n            return None\n        elif len(stack) == 1:\n            release_local(self._local)\n            return stack[-1]\n        else:\n            return stack.pop()\n\n    @property\n    def top(self):\n        \"\"\"The topmost item on the stack.  If the stack is empty,\n        `None` is returned.\n        \"\"\"\n        try:\n            return self._local.stack[-1]\n        except (AttributeError, IndexError):\n            return None\n```\n\nLocalProxy则是一个典型的代理模式实现, LocalProxy接受一个callable的参数(比如一个函数)和一个string(可选), 这个参数被调用后本身应该是一个Werkzeug.local.Locald对象.\n把这个对LocalProxy对象的所有操作, 包括属性访问, 方法调用, 甚至是二元操作都会转发到Werkzeug.local.Locald对象上, 并且设置这个这个对象的__name__=string\n\n```python\n@implements_bool\nclass LocalProxy(object):\n\n    \"\"\"Acts as a proxy for a werkzeug local.  Forwards all operations to\n    a proxied object.  The only operations not supported for forwarding\n    are right handed operands and any kind of assignment.\n\n    Example usage::\n\n        from werkzeug.local import Local\n        l = Local()\n\n        # these are proxies\n        request = l('request')\n        user = l('user')\n\n\n        from werkzeug.local import LocalStack\n        _response_local = LocalStack()\n\n        # this is a proxy\n        response = _response_local()\n\n    Whenever something is bound to l.user / l.request the proxy objects\n    will forward all operations.  If no object is bound a :exc:`RuntimeError`\n    will be raised.\n\n    To create proxies to :class:`Local` or :class:`LocalStack` objects,\n    call the object as shown above.  If you want to have a proxy to an\n    object looked up by a function, you can (as of Werkzeug 0.6.1) pass\n    a function to the :class:`LocalProxy` constructor::\n\n        session = LocalProxy(lambda: get_current_request().session)\n\n    .. versionchanged:: 0.6.1\n       The class can be instanciated with a callable as well now.\n    \"\"\"\n```\n\n#### wsgi_app\n\n* 第一步：生成request请求对象和请求上下文环境\n* 第二步：请求进入预处理，错误处理及请求转发到响应的过程\n* 第三步：请求分发 dispatch_request\n* 第四步：返回到wsgi_app内部\n\n![示例图](https://martin-upload.b0.upaiyun.com/web/2017/06/bf02aa078b9ba72d9fcda9b3b45125fd.jpeg)\n\n```python\n    def wsgi_app(self, environ, start_response):\n        \"\"\"The actual WSGI application.  This is not implemented in\n        `__call__` so that middlewares can be applied without losing a\n        reference to the class.  So instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n           The behavior of the before and after request callbacks was changed\n           under error conditions and a new callback was added that will\n           always execute at the end of the request, independent on if an\n           error occurred or not.  See :ref:`callbacks-and-errors`.\n\n        :param environ: a WSGI environment\n        :param start_response: a callable accepting a status code,\n                               a list of headers and an optional\n                               exception context to start the response\n        \"\"\"\n        ctx = self.request_context(environ)\n        ctx.push()\n        error = None\n        try:\n            try:\n                response = self.full_dispatch_request()\n            except Exception as e:\n                error = e\n                response = self.make_response(self.handle_exception(e))\n            return response(environ, start_response)\n        finally:\n            if self.should_ignore_error(error):\n                error = None\n            ctx.auto_pop(error)\n\n    def __call__(self, environ, start_response):\n        \"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"\n        return self.wsgi_app(environ, start_response)\n```\n\n#### 应用上下文 AppContext\n\n应用上下文会在合适的时间创建和销毁, 它不会在线程中移动, 并且也不会在不同的请求之间共享, 所以它一般用来存储数据库连接信息或者别的东西的最佳位置.\n当`app = Flask(__name__)`构造出一个Flask App的时候, AppContext并不会自动推入到_app_ctx_stack中, \n如果你使用Flask-SQLAlchemy, 需要写一个离线脚本时候, 你就会知道这其中的坑(RuntimeError). \n解决的办法是: 在运行离线脚本之前, 先将App的AppContext PUSH到_app_ctx_stack中, `ctx = app.app_context()  ctx.push()`\n但是当我们正常跑Flask服务的时候, 是不需要手动push. 推入部分的逻辑有这样一条：如果发现 _app_ctx_stack 为空，则隐式地推入一个AppContext。\n\n\n```python\nflask.globals.py\n\n\ndef _lookup_app_object(name):\n    top = _app_ctx_stack.top\n    if top is None:\n        raise RuntimeError(_app_ctx_err_msg)\n    return getattr(top, name)\n    \n\ndef _find_app():\n    top = _app_ctx_stack.top\n    if top is None:\n        raise RuntimeError(_app_ctx_err_msg)\n    return top.app\n\n_app_ctx_stack = LocalStack()\ncurrent_app = LocalProxy(_find_app)\ng = LocalProxy(partial(_lookup_app_object, 'g'))\n```\n\n```python\nclass AppContext(object):\n    \"\"\"The application context binds an application object implicitly\n    to the current thread or greenlet, similar to how the\n    :class:`RequestContext` binds request information.  The application\n    context is also implicitly created if a request context is created\n    but the application is not on top of the individual application\n    context.\n    \"\"\"\n\n    def __init__(self, app):\n        self.app = app\n        self.url_adapter = app.create_url_adapter(None)\n        self.g = app.app_ctx_globals_class()\n\n        # Like request context, app contexts can be pushed multiple times\n        # but there a basic \"refcount\" is enough to track them.\n        self._refcnt = 0\n```\n\n\n#### 请求上下文 RequestContext\nrequest和session都属于请求上下文\nrequest 针对的是http请求作为对象\nsession 针对的是更多是用户信息作为对象\n\n\n```python\n\n\ndef _lookup_req_object(name):\n    top = _request_ctx_stack.top\n    if top is None:\n        raise RuntimeError(_request_ctx_err_msg)\n    return getattr(top, name)\n\n_request_ctx_stack = LocalStack()\nrequest = LocalProxy(partial(_lookup_req_object, 'request'))\nsession = LocalProxy(partial(_lookup_req_object, 'session'))\n```\n\n```python\nclass RequestContext(object):\n    \"\"\"The request context contains all request relevant information.  It is\n    created at the beginning of the request and pushed to the\n    `_request_ctx_stack` and removed at the end of it.  It will create the\n    URL adapter and request object for the WSGI environment provided.\n\n    Do not attempt to use this class directly, instead use\n    :meth:`~flask.Flask.test_request_context` and\n    :meth:`~flask.Flask.request_context` to create this object.\n\n    When the request context is popped, it will evaluate all the\n    functions registered on the application for teardown execution\n    (:meth:`~flask.Flask.teardown_request`).\n\n    The request context is automatically popped at the end of the request\n    for you.  In debug mode the request context is kept around if\n    exceptions happen so that interactive debuggers have a chance to\n    introspect the data.  With 0.4 this can also be forced for requests\n    that did not fail and outside of ``DEBUG`` mode.  By setting\n    ``'flask._preserve_context'`` to ``True`` on the WSGI environment the\n    context will not pop itself at the end of the request.  This is used by\n    the :meth:`~flask.Flask.test_client` for example to implement the\n    deferred cleanup functionality.\n\n    You might find this helpful for unittests where you need the\n    information from the context local around for a little longer.  Make\n    sure to properly :meth:`~werkzeug.LocalStack.pop` the stack yourself in\n    that situation, otherwise your unittests will leak memory.\n    \"\"\"\n\n    def __init__(self, app, environ, request=None):\n        self.app = app\n        if request is None:\n            request = app.request_class(environ)\n        self.request = request\n        self.url_adapter = app.create_url_adapter(self.request)\n        self.flashes = None\n        self.session = None\n\n        # Request contexts can be pushed multiple times and interleaved with\n        # other request contexts.  Now only if the last level is popped we\n        # get rid of them.  Additionally if an application context is missing\n        # one is created implicitly so for each level we add this information\n        self._implicit_app_ctx_stack = []\n\n        # indicator if the context was preserved.  Next time another context\n        # is pushed the preserved context is popped.\n        self.preserved = False\n\n        # remembers the exception for pop if there is one in case the context\n        # preservation kicks in.\n        self._preserved_exc = None\n\n        # Functions that should be executed after the request on the response\n        # object.  These will be called before the regular \"after_request\"\n        # functions.\n        self._after_request_functions = []\n\n        self.match_request()\n```\n\n##### 参考文献\n* [Flask 应用上下文](http://www.pythondoc.com/flask/appcontext.html)\n* [Flask 请求上下文](http://www.pythondoc.com/flask/reqcontext.html)\n* [Flask 的 Context 机制](https://blog.tonyseek.com/post/the-context-mechanism-of-flask/)\n* [Flask的Context(上下文)学习笔记](http://www.jianshu.com/p/7a7efbb7205f)\n* [flask 源码解析：上下文](https://segmentfault.com/a/1190000008383197)","source":"_posts/flask_g_request.md","raw":"layout: flask_g_request_layout\ntitle: Flask学习笔记第一篇之上下文\ndate: 2017-06-02 13:26:05\ntags: 重点\ncomments: true\ncategories: Python\n\n---\n\n本文只是记录个人学习Flask上下文的一些理解. 关于上下文的理解和更多的信息, 可以参考最下方的参考文献!\nFlask 中有两种上下文 请求上下文和应用上下文. \n\n#### Werkzeug 实现的 Local Stack 和 Local Proxy\n\n在了解Flask 上下文之前, 必须得先了解Werkzeug.local.Local\n\nWerkzeug 实现了一个Local类, 类似于ThreadLocal.\n\n首先我们看看ThreadLocal. ThreadLocal则是一种特殊的对象, 它的\"状态\"对线程隔离——也就是说每个线程对一个ThreadLocal对象的修改都不会影响其他线程. \n\nThreadLocal的内部实现:\n\n```python\nclass _local(object):\n    \"\"\" Thread-local data \"\"\"\n    def __delattr__(self, name): # real signature unknown; restored from __doc__\n        \"\"\" x.__delattr__('name') <==> del x.name \"\"\"\n        pass\n\n    def __getattribute__(self, name): # real signature unknown; restored from __doc__\n        \"\"\" x.__getattribute__('name') <==> x.name \"\"\"\n        pass\n\n    def __init__(self, *args, **kwargs): # real signature unknown\n        pass\n\n    @staticmethod # known case of __new__\n    def __new__(S, *more): # real signature unknown; restored from __doc__\n        \"\"\" T.__new__(S, ...) -> a new object with type S, a subtype of T \"\"\"\n        pass\n\n    def __setattr__(self, name, value): # real signature unknown; restored from __doc__\n        \"\"\" x.__setattr__('name', value) <==> x.name = value \"\"\"\n        pass\n\n```\n\nThreadLocal Demo:\n\n```python\n#!/usr/bin/env python\n# coding: utf-8\n\nimport threading\n\n\nthread_local = threading.local()\nthread_local.main_id = 0\n\nprint thread_local.main_id     # 主线程里面, 打印结果为0\n\n\nclass AppThread(threading.Thread):\n    num = 0\n\n    def set_num(self, num):\n        self.num = num\n\n    def run(self):\n        thread_local.main_id = self.num\n        print thread_local.main_id      # 在这个线程里面, 修改mian_id值\n\n\napp_thread = AppThread()\napp_thread.set_num(4)\napp_thread.start()\nprint thread_local.main_id      # 主线程 main_id 没有改变\n\n```\nWerkzeug.local.Local类\n* Werkzeug.local.Local会在Greenlet可用的情况下优先使用Greenlet的ID而不是线程ID以支持Gevent或Eventlet的调度; ThreadLocal只支持多线程调度\n* Werkzeug.local.Local实现的__release_local__的方法, 可以被release_local函数释放掉当前线程下的状态, 源码中有Example\n\n```python\ndef release_local(local):\n    \"\"\"Releases the contents of the local for the current context.\n    This makes it possible to use locals without a manager.\n\n    Example::\n\n        >>> loc = Local()\n        >>> loc.foo = 42\n        >>> release_local(loc)\n        >>> hasattr(loc, 'foo')\n        False\n\n    With this function one can release :class:`Local` objects as well\n    as :class:`LocalStack` objects.  However it is not possible to\n    release data held by proxies that way, one always has to retain\n    a reference to the underlying local object in order to be able\n    to release it.\n\n    .. versionadded:: 0.6.1\n    \"\"\"\n    local.__release_local__()\n\n\nclass Local(object):\n    __slots__ = ('__storage__', '__ident_func__')\n\n    def __init__(self):\n        object.__setattr__(self, '__storage__', {})\n        object.__setattr__(self, '__ident_func__', get_ident)\n\n    def __iter__(self):\n        return iter(self.__storage__.items())\n\n    def __call__(self, proxy):\n        \"\"\"Create a proxy for a name.\"\"\"\n        return LocalProxy(self, proxy)\n\n    def __release_local__(self):\n        self.__storage__.pop(self.__ident_func__(), None)\n\n    def __getattr__(self, name):\n        try:\n            return self.__storage__[self.__ident_func__()][name]\n        except KeyError:\n            raise AttributeError(name)\n\n    def __setattr__(self, name, value):\n        ident = self.__ident_func__()\n        storage = self.__storage__\n        try:\n            storage[ident][name] = value\n        except KeyError:\n            storage[ident] = {name: value}\n\n    def __delattr__(self, name):\n        try:\n            del self.__storage__[self.__ident_func__()][name]\n        except KeyError:\n            raise AttributeError(name)\n```\n\n接下来我们来看看Werkzeug实现的LocalStack 和 LocalProxy\n\nLocalStack是用Werkzeug.local.Local实现的stack结构, 实现了pop, push以及top(快速拿到栈顶元素)等方法, 这些所有的操作都只在本线程可见.\nLocaLStack也可以被release_local函数释放掉当前线程下的状态(它也实现了__release_local__方法)\n```python\nclass LocalStack(object):\n\n    \"\"\"This class works similar to a :class:`Local` but keeps a stack\n    of objects instead.  This is best explained with an example::\n\n        >>> ls = LocalStack()\n        >>> ls.push(42)\n        >>> ls.top\n        42\n        >>> ls.push(23)\n        >>> ls.top\n        23\n        >>> ls.pop()\n        23\n        >>> ls.top\n        42\n\n    They can be force released by using a :class:`LocalManager` or with\n    the :func:`release_local` function but the correct way is to pop the\n    item from the stack after using.  When the stack is empty it will\n    no longer be bound to the current context (and as such released).\n\n    By calling the stack without arguments it returns a proxy that resolves to\n    the topmost item on the stack.\n\n    .. versionadded:: 0.6.1\n    \"\"\"\n\n    def __init__(self):\n        self._local = Local()\n\n    def __release_local__(self):\n        self._local.__release_local__()\n\n    def _get__ident_func__(self):\n        return self._local.__ident_func__\n\n    def _set__ident_func__(self, value):\n        object.__setattr__(self._local, '__ident_func__', value)\n    __ident_func__ = property(_get__ident_func__, _set__ident_func__)\n    del _get__ident_func__, _set__ident_func__\n\n    def __call__(self):\n        def _lookup():\n            rv = self.top\n            if rv is None:\n                raise RuntimeError('object unbound')\n            return rv\n        return LocalProxy(_lookup)\n\n    def push(self, obj):\n        \"\"\"Pushes a new item to the stack\"\"\"\n        rv = getattr(self._local, 'stack', None)\n        if rv is None:\n            self._local.stack = rv = []\n        rv.append(obj)\n        return rv\n\n    def pop(self):\n        \"\"\"Removes the topmost item from the stack, will return the\n        old value or `None` if the stack was already empty.\n        \"\"\"\n        stack = getattr(self._local, 'stack', None)\n        if stack is None:\n            return None\n        elif len(stack) == 1:\n            release_local(self._local)\n            return stack[-1]\n        else:\n            return stack.pop()\n\n    @property\n    def top(self):\n        \"\"\"The topmost item on the stack.  If the stack is empty,\n        `None` is returned.\n        \"\"\"\n        try:\n            return self._local.stack[-1]\n        except (AttributeError, IndexError):\n            return None\n```\n\nLocalProxy则是一个典型的代理模式实现, LocalProxy接受一个callable的参数(比如一个函数)和一个string(可选), 这个参数被调用后本身应该是一个Werkzeug.local.Locald对象.\n把这个对LocalProxy对象的所有操作, 包括属性访问, 方法调用, 甚至是二元操作都会转发到Werkzeug.local.Locald对象上, 并且设置这个这个对象的__name__=string\n\n```python\n@implements_bool\nclass LocalProxy(object):\n\n    \"\"\"Acts as a proxy for a werkzeug local.  Forwards all operations to\n    a proxied object.  The only operations not supported for forwarding\n    are right handed operands and any kind of assignment.\n\n    Example usage::\n\n        from werkzeug.local import Local\n        l = Local()\n\n        # these are proxies\n        request = l('request')\n        user = l('user')\n\n\n        from werkzeug.local import LocalStack\n        _response_local = LocalStack()\n\n        # this is a proxy\n        response = _response_local()\n\n    Whenever something is bound to l.user / l.request the proxy objects\n    will forward all operations.  If no object is bound a :exc:`RuntimeError`\n    will be raised.\n\n    To create proxies to :class:`Local` or :class:`LocalStack` objects,\n    call the object as shown above.  If you want to have a proxy to an\n    object looked up by a function, you can (as of Werkzeug 0.6.1) pass\n    a function to the :class:`LocalProxy` constructor::\n\n        session = LocalProxy(lambda: get_current_request().session)\n\n    .. versionchanged:: 0.6.1\n       The class can be instanciated with a callable as well now.\n    \"\"\"\n```\n\n#### wsgi_app\n\n* 第一步：生成request请求对象和请求上下文环境\n* 第二步：请求进入预处理，错误处理及请求转发到响应的过程\n* 第三步：请求分发 dispatch_request\n* 第四步：返回到wsgi_app内部\n\n![示例图](https://martin-upload.b0.upaiyun.com/web/2017/06/bf02aa078b9ba72d9fcda9b3b45125fd.jpeg)\n\n```python\n    def wsgi_app(self, environ, start_response):\n        \"\"\"The actual WSGI application.  This is not implemented in\n        `__call__` so that middlewares can be applied without losing a\n        reference to the class.  So instead of doing this::\n\n            app = MyMiddleware(app)\n\n        It's a better idea to do this instead::\n\n            app.wsgi_app = MyMiddleware(app.wsgi_app)\n\n        Then you still have the original application object around and\n        can continue to call methods on it.\n\n        .. versionchanged:: 0.7\n           The behavior of the before and after request callbacks was changed\n           under error conditions and a new callback was added that will\n           always execute at the end of the request, independent on if an\n           error occurred or not.  See :ref:`callbacks-and-errors`.\n\n        :param environ: a WSGI environment\n        :param start_response: a callable accepting a status code,\n                               a list of headers and an optional\n                               exception context to start the response\n        \"\"\"\n        ctx = self.request_context(environ)\n        ctx.push()\n        error = None\n        try:\n            try:\n                response = self.full_dispatch_request()\n            except Exception as e:\n                error = e\n                response = self.make_response(self.handle_exception(e))\n            return response(environ, start_response)\n        finally:\n            if self.should_ignore_error(error):\n                error = None\n            ctx.auto_pop(error)\n\n    def __call__(self, environ, start_response):\n        \"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"\n        return self.wsgi_app(environ, start_response)\n```\n\n#### 应用上下文 AppContext\n\n应用上下文会在合适的时间创建和销毁, 它不会在线程中移动, 并且也不会在不同的请求之间共享, 所以它一般用来存储数据库连接信息或者别的东西的最佳位置.\n当`app = Flask(__name__)`构造出一个Flask App的时候, AppContext并不会自动推入到_app_ctx_stack中, \n如果你使用Flask-SQLAlchemy, 需要写一个离线脚本时候, 你就会知道这其中的坑(RuntimeError). \n解决的办法是: 在运行离线脚本之前, 先将App的AppContext PUSH到_app_ctx_stack中, `ctx = app.app_context()  ctx.push()`\n但是当我们正常跑Flask服务的时候, 是不需要手动push. 推入部分的逻辑有这样一条：如果发现 _app_ctx_stack 为空，则隐式地推入一个AppContext。\n\n\n```python\nflask.globals.py\n\n\ndef _lookup_app_object(name):\n    top = _app_ctx_stack.top\n    if top is None:\n        raise RuntimeError(_app_ctx_err_msg)\n    return getattr(top, name)\n    \n\ndef _find_app():\n    top = _app_ctx_stack.top\n    if top is None:\n        raise RuntimeError(_app_ctx_err_msg)\n    return top.app\n\n_app_ctx_stack = LocalStack()\ncurrent_app = LocalProxy(_find_app)\ng = LocalProxy(partial(_lookup_app_object, 'g'))\n```\n\n```python\nclass AppContext(object):\n    \"\"\"The application context binds an application object implicitly\n    to the current thread or greenlet, similar to how the\n    :class:`RequestContext` binds request information.  The application\n    context is also implicitly created if a request context is created\n    but the application is not on top of the individual application\n    context.\n    \"\"\"\n\n    def __init__(self, app):\n        self.app = app\n        self.url_adapter = app.create_url_adapter(None)\n        self.g = app.app_ctx_globals_class()\n\n        # Like request context, app contexts can be pushed multiple times\n        # but there a basic \"refcount\" is enough to track them.\n        self._refcnt = 0\n```\n\n\n#### 请求上下文 RequestContext\nrequest和session都属于请求上下文\nrequest 针对的是http请求作为对象\nsession 针对的是更多是用户信息作为对象\n\n\n```python\n\n\ndef _lookup_req_object(name):\n    top = _request_ctx_stack.top\n    if top is None:\n        raise RuntimeError(_request_ctx_err_msg)\n    return getattr(top, name)\n\n_request_ctx_stack = LocalStack()\nrequest = LocalProxy(partial(_lookup_req_object, 'request'))\nsession = LocalProxy(partial(_lookup_req_object, 'session'))\n```\n\n```python\nclass RequestContext(object):\n    \"\"\"The request context contains all request relevant information.  It is\n    created at the beginning of the request and pushed to the\n    `_request_ctx_stack` and removed at the end of it.  It will create the\n    URL adapter and request object for the WSGI environment provided.\n\n    Do not attempt to use this class directly, instead use\n    :meth:`~flask.Flask.test_request_context` and\n    :meth:`~flask.Flask.request_context` to create this object.\n\n    When the request context is popped, it will evaluate all the\n    functions registered on the application for teardown execution\n    (:meth:`~flask.Flask.teardown_request`).\n\n    The request context is automatically popped at the end of the request\n    for you.  In debug mode the request context is kept around if\n    exceptions happen so that interactive debuggers have a chance to\n    introspect the data.  With 0.4 this can also be forced for requests\n    that did not fail and outside of ``DEBUG`` mode.  By setting\n    ``'flask._preserve_context'`` to ``True`` on the WSGI environment the\n    context will not pop itself at the end of the request.  This is used by\n    the :meth:`~flask.Flask.test_client` for example to implement the\n    deferred cleanup functionality.\n\n    You might find this helpful for unittests where you need the\n    information from the context local around for a little longer.  Make\n    sure to properly :meth:`~werkzeug.LocalStack.pop` the stack yourself in\n    that situation, otherwise your unittests will leak memory.\n    \"\"\"\n\n    def __init__(self, app, environ, request=None):\n        self.app = app\n        if request is None:\n            request = app.request_class(environ)\n        self.request = request\n        self.url_adapter = app.create_url_adapter(self.request)\n        self.flashes = None\n        self.session = None\n\n        # Request contexts can be pushed multiple times and interleaved with\n        # other request contexts.  Now only if the last level is popped we\n        # get rid of them.  Additionally if an application context is missing\n        # one is created implicitly so for each level we add this information\n        self._implicit_app_ctx_stack = []\n\n        # indicator if the context was preserved.  Next time another context\n        # is pushed the preserved context is popped.\n        self.preserved = False\n\n        # remembers the exception for pop if there is one in case the context\n        # preservation kicks in.\n        self._preserved_exc = None\n\n        # Functions that should be executed after the request on the response\n        # object.  These will be called before the regular \"after_request\"\n        # functions.\n        self._after_request_functions = []\n\n        self.match_request()\n```\n\n##### 参考文献\n* [Flask 应用上下文](http://www.pythondoc.com/flask/appcontext.html)\n* [Flask 请求上下文](http://www.pythondoc.com/flask/reqcontext.html)\n* [Flask 的 Context 机制](https://blog.tonyseek.com/post/the-context-mechanism-of-flask/)\n* [Flask的Context(上下文)学习笔记](http://www.jianshu.com/p/7a7efbb7205f)\n* [flask 源码解析：上下文](https://segmentfault.com/a/1190000008383197)","slug":"flask_g_request","published":1,"updated":"2017-06-05T11:04:47.452Z","photos":[],"link":"","_id":"cj3l060x80003nzy63uw8kowr","content":"<p>本文只是记录个人学习Flask上下文的一些理解. 关于上下文的理解和更多的信息, 可以参考最下方的参考文献!<br>Flask 中有两种上下文 请求上下文和应用上下文. </p>\n<h4 id=\"Werkzeug-实现的-Local-Stack-和-Local-Proxy\"><a href=\"#Werkzeug-实现的-Local-Stack-和-Local-Proxy\" class=\"headerlink\" title=\"Werkzeug 实现的 Local Stack 和 Local Proxy\"></a>Werkzeug 实现的 Local Stack 和 Local Proxy</h4><p>在了解Flask 上下文之前, 必须得先了解Werkzeug.local.Local</p>\n<p>Werkzeug 实现了一个Local类, 类似于ThreadLocal.</p>\n<p>首先我们看看ThreadLocal. ThreadLocal则是一种特殊的对象, 它的”状态”对线程隔离——也就是说每个线程对一个ThreadLocal对象的修改都不会影响其他线程. </p>\n<p>ThreadLocal的内部实现:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_local</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" Thread-local data \"\"\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delattr__</span><span class=\"params\">(self, name)</span>:</span> <span class=\"comment\"># real signature unknown; restored from __doc__</span></div><div class=\"line\">        <span class=\"string\">\"\"\" x.__delattr__('name') &lt;==&gt; del x.name \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattribute__</span><span class=\"params\">(self, name)</span>:</span> <span class=\"comment\"># real signature unknown; restored from __doc__</span></div><div class=\"line\">        <span class=\"string\">\"\"\" x.__getattribute__('name') &lt;==&gt; x.name \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span> <span class=\"comment\"># real signature unknown</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @staticmethod # known case of __new__</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(S, *more)</span>:</span> <span class=\"comment\"># real signature unknown; restored from __doc__</span></div><div class=\"line\">        <span class=\"string\">\"\"\" T.__new__(S, ...) -&gt; a new object with type S, a subtype of T \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, name, value)</span>:</span> <span class=\"comment\"># real signature unknown; restored from __doc__</span></div><div class=\"line\">        <span class=\"string\">\"\"\" x.__setattr__('name', value) &lt;==&gt; x.name = value \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n<p>ThreadLocal Demo:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">thread_local = threading.local()</div><div class=\"line\">thread_local.main_id = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> thread_local.main_id     <span class=\"comment\"># 主线程里面, 打印结果为0</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppThread</span><span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\">    num = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_num</span><span class=\"params\">(self, num)</span>:</span></div><div class=\"line\">        self.num = num</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        thread_local.main_id = self.num</div><div class=\"line\">        <span class=\"keyword\">print</span> thread_local.main_id      <span class=\"comment\"># 在这个线程里面, 修改mian_id值</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app_thread = AppThread()</div><div class=\"line\">app_thread.set_num(<span class=\"number\">4</span>)</div><div class=\"line\">app_thread.start()</div><div class=\"line\"><span class=\"keyword\">print</span> thread_local.main_id      <span class=\"comment\"># 主线程 main_id 没有改变</span></div></pre></td></tr></table></figure>\n<p>Werkzeug.local.Local类</p>\n<ul>\n<li>Werkzeug.local.Local会在Greenlet可用的情况下优先使用Greenlet的ID而不是线程ID以支持Gevent或Eventlet的调度; ThreadLocal只支持多线程调度</li>\n<li>Werkzeug.local.Local实现的<strong>release_local</strong>的方法, 可以被release_local函数释放掉当前线程下的状态, 源码中有Example</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">release_local</span><span class=\"params\">(local)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"Releases the contents of the local for the current context.</span></div><div class=\"line\">    This makes it possible to use locals without a manager.</div><div class=\"line\"></div><div class=\"line\">    Example::</div><div class=\"line\"></div><div class=\"line\">        &gt;&gt;&gt; loc = Local()</div><div class=\"line\">        &gt;&gt;&gt; loc.foo = 42</div><div class=\"line\">        &gt;&gt;&gt; release_local(loc)</div><div class=\"line\">        &gt;&gt;&gt; hasattr(loc, 'foo')</div><div class=\"line\">        False</div><div class=\"line\"></div><div class=\"line\">    With this function one can release :class:`Local` objects as well</div><div class=\"line\">    as :class:`LocalStack` objects.  However it is not possible to</div><div class=\"line\">    release data held by proxies that way, one always has to retain</div><div class=\"line\">    a reference to the underlying local object in order to be able</div><div class=\"line\">    to release it.</div><div class=\"line\"></div><div class=\"line\">    .. versionadded:: 0.6.1</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    local.__release_local__()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    __slots__ = (<span class=\"string\">'__storage__'</span>, <span class=\"string\">'__ident_func__'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        object.__setattr__(self, <span class=\"string\">'__storage__'</span>, &#123;&#125;)</div><div class=\"line\">        object.__setattr__(self, <span class=\"string\">'__ident_func__'</span>, get_ident)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> iter(self.__storage__.items())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, proxy)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"Create a proxy for a name.\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> LocalProxy(self, proxy)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__release_local__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.__storage__.pop(self.__ident_func__(), <span class=\"keyword\">None</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self.__storage__[self.__ident_func__()][name]</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(name)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, name, value)</span>:</span></div><div class=\"line\">        ident = self.__ident_func__()</div><div class=\"line\">        storage = self.__storage__</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            storage[ident][name] = value</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            storage[ident] = &#123;name: value&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delattr__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">del</span> self.__storage__[self.__ident_func__()][name]</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(name)</div></pre></td></tr></table></figure>\n<p>接下来我们来看看Werkzeug实现的LocalStack 和 LocalProxy</p>\n<p>LocalStack是用Werkzeug.local.Local实现的stack结构, 实现了pop, push以及top(快速拿到栈顶元素)等方法, 这些所有的操作都只在本线程可见.<br>LocaLStack也可以被release_local函数释放掉当前线程下的状态(它也实现了<strong>release_local</strong>方法)<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalStack</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"\"\"This class works similar to a :class:`Local` but keeps a stack</span></div><div class=\"line\">    of objects instead.  This is best explained with an example::</div><div class=\"line\"></div><div class=\"line\">        &gt;&gt;&gt; ls = LocalStack()</div><div class=\"line\">        &gt;&gt;&gt; ls.push(42)</div><div class=\"line\">        &gt;&gt;&gt; ls.top</div><div class=\"line\">        42</div><div class=\"line\">        &gt;&gt;&gt; ls.push(23)</div><div class=\"line\">        &gt;&gt;&gt; ls.top</div><div class=\"line\">        23</div><div class=\"line\">        &gt;&gt;&gt; ls.pop()</div><div class=\"line\">        23</div><div class=\"line\">        &gt;&gt;&gt; ls.top</div><div class=\"line\">        42</div><div class=\"line\"></div><div class=\"line\">    They can be force released by using a :class:`LocalManager` or with</div><div class=\"line\">    the :func:`release_local` function but the correct way is to pop the</div><div class=\"line\">    item from the stack after using.  When the stack is empty it will</div><div class=\"line\">    no longer be bound to the current context (and as such released).</div><div class=\"line\"></div><div class=\"line\">    By calling the stack without arguments it returns a proxy that resolves to</div><div class=\"line\">    the topmost item on the stack.</div><div class=\"line\"></div><div class=\"line\">    .. versionadded:: 0.6.1</div><div class=\"line\">    \"\"\"</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self._local = Local()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__release_local__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self._local.__release_local__()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get__ident_func__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._local.__ident_func__</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_set__ident_func__</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        object.__setattr__(self._local, <span class=\"string\">'__ident_func__'</span>, value)</div><div class=\"line\">    __ident_func__ = property(_get__ident_func__, _set__ident_func__)</div><div class=\"line\">    <span class=\"keyword\">del</span> _get__ident_func__, _set__ident_func__</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_lookup</span><span class=\"params\">()</span>:</span></div><div class=\"line\">            rv = self.top</div><div class=\"line\">            <span class=\"keyword\">if</span> rv <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                <span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">'object unbound'</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> rv</div><div class=\"line\">        <span class=\"keyword\">return</span> LocalProxy(_lookup)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, obj)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"Pushes a new item to the stack\"\"\"</span></div><div class=\"line\">        rv = getattr(self._local, <span class=\"string\">'stack'</span>, <span class=\"keyword\">None</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> rv <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            self._local.stack = rv = []</div><div class=\"line\">        rv.append(obj)</div><div class=\"line\">        <span class=\"keyword\">return</span> rv</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"Removes the topmost item from the stack, will return the</span></div><div class=\"line\">        old value or `None` if the stack was already empty.</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        stack = getattr(self._local, <span class=\"string\">'stack'</span>, <span class=\"keyword\">None</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> stack <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> len(stack) == <span class=\"number\">1</span>:</div><div class=\"line\">            release_local(self._local)</div><div class=\"line\">            <span class=\"keyword\">return</span> stack[<span class=\"number\">-1</span>]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> stack.pop()</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"The topmost item on the stack.  If the stack is empty,</span></div><div class=\"line\">        `None` is returned.</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self._local.stack[<span class=\"number\">-1</span>]</div><div class=\"line\">        <span class=\"keyword\">except</span> (AttributeError, IndexError):</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div></pre></td></tr></table></figure></p>\n<p>LocalProxy则是一个典型的代理模式实现, LocalProxy接受一个callable的参数(比如一个函数)和一个string(可选), 这个参数被调用后本身应该是一个Werkzeug.local.Locald对象.<br>把这个对LocalProxy对象的所有操作, 包括属性访问, 方法调用, 甚至是二元操作都会转发到Werkzeug.local.Locald对象上, 并且设置这个这个对象的<strong>name</strong>=string</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@implements_bool</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalProxy</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"\"\"Acts as a proxy for a werkzeug local.  Forwards all operations to</span></div><div class=\"line\">    a proxied object.  The only operations not supported for forwarding</div><div class=\"line\">    are right handed operands and any kind of assignment.</div><div class=\"line\"></div><div class=\"line\">    Example usage::</div><div class=\"line\"></div><div class=\"line\">        from werkzeug.local import Local</div><div class=\"line\">        l = Local()</div><div class=\"line\"></div><div class=\"line\">        # these are proxies</div><div class=\"line\">        request = l('request')</div><div class=\"line\">        user = l('user')</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        from werkzeug.local import LocalStack</div><div class=\"line\">        _response_local = LocalStack()</div><div class=\"line\"></div><div class=\"line\">        # this is a proxy</div><div class=\"line\">        response = _response_local()</div><div class=\"line\"></div><div class=\"line\">    Whenever something is bound to l.user / l.request the proxy objects</div><div class=\"line\">    will forward all operations.  If no object is bound a :exc:`RuntimeError`</div><div class=\"line\">    will be raised.</div><div class=\"line\"></div><div class=\"line\">    To create proxies to :class:`Local` or :class:`LocalStack` objects,</div><div class=\"line\">    call the object as shown above.  If you want to have a proxy to an</div><div class=\"line\">    object looked up by a function, you can (as of Werkzeug 0.6.1) pass</div><div class=\"line\">    a function to the :class:`LocalProxy` constructor::</div><div class=\"line\"></div><div class=\"line\">        session = LocalProxy(lambda: get_current_request().session)</div><div class=\"line\"></div><div class=\"line\">    .. versionchanged:: 0.6.1</div><div class=\"line\">       The class can be instanciated with a callable as well now.</div><div class=\"line\">    \"\"\"</div></pre></td></tr></table></figure>\n<h4 id=\"wsgi-app\"><a href=\"#wsgi-app\" class=\"headerlink\" title=\"wsgi_app\"></a>wsgi_app</h4><ul>\n<li>第一步：生成request请求对象和请求上下文环境</li>\n<li>第二步：请求进入预处理，错误处理及请求转发到响应的过程</li>\n<li>第三步：请求分发 dispatch_request</li>\n<li>第四步：返回到wsgi_app内部</li>\n</ul>\n<p><img src=\"https://martin-upload.b0.upaiyun.com/web/2017/06/bf02aa078b9ba72d9fcda9b3b45125fd.jpeg\" alt=\"示例图\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wsgi_app</span><span class=\"params\">(self, environ, start_response)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"The actual WSGI application.  This is not implemented in</span></div><div class=\"line\">    `__call__` so that middlewares can be applied without losing a</div><div class=\"line\">    reference to the class.  So instead of doing this::</div><div class=\"line\"></div><div class=\"line\">        app = MyMiddleware(app)</div><div class=\"line\"></div><div class=\"line\">    It's a better idea to do this instead::</div><div class=\"line\"></div><div class=\"line\">        app.wsgi_app = MyMiddleware(app.wsgi_app)</div><div class=\"line\"></div><div class=\"line\">    Then you still have the original application object around and</div><div class=\"line\">    can continue to call methods on it.</div><div class=\"line\"></div><div class=\"line\">    .. versionchanged:: 0.7</div><div class=\"line\">       The behavior of the before and after request callbacks was changed</div><div class=\"line\">       under error conditions and a new callback was added that will</div><div class=\"line\">       always execute at the end of the request, independent on if an</div><div class=\"line\">       error occurred or not.  See :ref:`callbacks-and-errors`.</div><div class=\"line\"></div><div class=\"line\">    :param environ: a WSGI environment</div><div class=\"line\">    :param start_response: a callable accepting a status code,</div><div class=\"line\">                           a list of headers and an optional</div><div class=\"line\">                           exception context to start the response</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    ctx = self.request_context(environ)</div><div class=\"line\">    ctx.push()</div><div class=\"line\">    error = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            response = self.full_dispatch_request()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            error = e</div><div class=\"line\">            response = self.make_response(self.handle_exception(e))</div><div class=\"line\">        <span class=\"keyword\">return</span> response(environ, start_response)</div><div class=\"line\">    <span class=\"keyword\">finally</span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> self.should_ignore_error(error):</div><div class=\"line\">            error = <span class=\"keyword\">None</span></div><div class=\"line\">        ctx.auto_pop(error)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, environ, start_response)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> self.wsgi_app(environ, start_response)</div></pre></td></tr></table></figure>\n<h4 id=\"应用上下文-AppContext\"><a href=\"#应用上下文-AppContext\" class=\"headerlink\" title=\"应用上下文 AppContext\"></a>应用上下文 AppContext</h4><p>应用上下文会在合适的时间创建和销毁, 它不会在线程中移动, 并且也不会在不同的请求之间共享, 所以它一般用来存储数据库连接信息或者别的东西的最佳位置.<br>当<code>app = Flask(__name__)</code>构造出一个Flask App的时候, AppContext并不会自动推入到_app_ctx_stack中,<br>如果你使用Flask-SQLAlchemy, 需要写一个离线脚本时候, 你就会知道这其中的坑(RuntimeError).<br>解决的办法是: 在运行离线脚本之前, 先将App的AppContext PUSH到_app_ctx_stack中, <code>ctx = app.app_context()  ctx.push()</code><br>但是当我们正常跑Flask服务的时候, 是不需要手动push. 推入部分的逻辑有这样一条：如果发现 _app_ctx_stack 为空，则隐式地推入一个AppContext。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">flask.globals.py</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_lookup_app_object</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    top = _app_ctx_stack.top</div><div class=\"line\">    <span class=\"keyword\">if</span> top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> RuntimeError(_app_ctx_err_msg)</div><div class=\"line\">    <span class=\"keyword\">return</span> getattr(top, name)</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_find_app</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    top = _app_ctx_stack.top</div><div class=\"line\">    <span class=\"keyword\">if</span> top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> RuntimeError(_app_ctx_err_msg)</div><div class=\"line\">    <span class=\"keyword\">return</span> top.app</div><div class=\"line\"></div><div class=\"line\">_app_ctx_stack = LocalStack()</div><div class=\"line\">current_app = LocalProxy(_find_app)</div><div class=\"line\">g = LocalProxy(partial(_lookup_app_object, <span class=\"string\">'g'</span>))</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppContext</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"The application context binds an application object implicitly</span></div><div class=\"line\">    to the current thread or greenlet, similar to how the</div><div class=\"line\">    :class:`RequestContext` binds request information.  The application</div><div class=\"line\">    context is also implicitly created if a request context is created</div><div class=\"line\">    but the application is not on top of the individual application</div><div class=\"line\">    context.</div><div class=\"line\">    \"\"\"</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, app)</span>:</span></div><div class=\"line\">        self.app = app</div><div class=\"line\">        self.url_adapter = app.create_url_adapter(<span class=\"keyword\">None</span>)</div><div class=\"line\">        self.g = app.app_ctx_globals_class()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Like request context, app contexts can be pushed multiple times</span></div><div class=\"line\">        <span class=\"comment\"># but there a basic \"refcount\" is enough to track them.</span></div><div class=\"line\">        self._refcnt = <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<h4 id=\"请求上下文-RequestContext\"><a href=\"#请求上下文-RequestContext\" class=\"headerlink\" title=\"请求上下文 RequestContext\"></a>请求上下文 RequestContext</h4><p>request和session都属于请求上下文<br>request 针对的是http请求作为对象<br>session 针对的是更多是用户信息作为对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_lookup_req_object</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    top = _request_ctx_stack.top</div><div class=\"line\">    <span class=\"keyword\">if</span> top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> RuntimeError(_request_ctx_err_msg)</div><div class=\"line\">    <span class=\"keyword\">return</span> getattr(top, name)</div><div class=\"line\"></div><div class=\"line\">_request_ctx_stack = LocalStack()</div><div class=\"line\">request = LocalProxy(partial(_lookup_req_object, <span class=\"string\">'request'</span>))</div><div class=\"line\">session = LocalProxy(partial(_lookup_req_object, <span class=\"string\">'session'</span>))</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestContext</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"The request context contains all request relevant information.  It is</span></div><div class=\"line\">    created at the beginning of the request and pushed to the</div><div class=\"line\">    `_request_ctx_stack` and removed at the end of it.  It will create the</div><div class=\"line\">    URL adapter and request object for the WSGI environment provided.</div><div class=\"line\"></div><div class=\"line\">    Do not attempt to use this class directly, instead use</div><div class=\"line\">    :meth:`~flask.Flask.test_request_context` and</div><div class=\"line\">    :meth:`~flask.Flask.request_context` to create this object.</div><div class=\"line\"></div><div class=\"line\">    When the request context is popped, it will evaluate all the</div><div class=\"line\">    functions registered on the application for teardown execution</div><div class=\"line\">    (:meth:`~flask.Flask.teardown_request`).</div><div class=\"line\"></div><div class=\"line\">    The request context is automatically popped at the end of the request</div><div class=\"line\">    for you.  In debug mode the request context is kept around if</div><div class=\"line\">    exceptions happen so that interactive debuggers have a chance to</div><div class=\"line\">    introspect the data.  With 0.4 this can also be forced for requests</div><div class=\"line\">    that did not fail and outside of ``DEBUG`` mode.  By setting</div><div class=\"line\">    ``'flask._preserve_context'`` to ``True`` on the WSGI environment the</div><div class=\"line\">    context will not pop itself at the end of the request.  This is used by</div><div class=\"line\">    the :meth:`~flask.Flask.test_client` for example to implement the</div><div class=\"line\">    deferred cleanup functionality.</div><div class=\"line\"></div><div class=\"line\">    You might find this helpful for unittests where you need the</div><div class=\"line\">    information from the context local around for a little longer.  Make</div><div class=\"line\">    sure to properly :meth:`~werkzeug.LocalStack.pop` the stack yourself in</div><div class=\"line\">    that situation, otherwise your unittests will leak memory.</div><div class=\"line\">    \"\"\"</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, app, environ, request=None)</span>:</span></div><div class=\"line\">        self.app = app</div><div class=\"line\">        <span class=\"keyword\">if</span> request <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            request = app.request_class(environ)</div><div class=\"line\">        self.request = request</div><div class=\"line\">        self.url_adapter = app.create_url_adapter(self.request)</div><div class=\"line\">        self.flashes = <span class=\"keyword\">None</span></div><div class=\"line\">        self.session = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Request contexts can be pushed multiple times and interleaved with</span></div><div class=\"line\">        <span class=\"comment\"># other request contexts.  Now only if the last level is popped we</span></div><div class=\"line\">        <span class=\"comment\"># get rid of them.  Additionally if an application context is missing</span></div><div class=\"line\">        <span class=\"comment\"># one is created implicitly so for each level we add this information</span></div><div class=\"line\">        self._implicit_app_ctx_stack = []</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># indicator if the context was preserved.  Next time another context</span></div><div class=\"line\">        <span class=\"comment\"># is pushed the preserved context is popped.</span></div><div class=\"line\">        self.preserved = <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># remembers the exception for pop if there is one in case the context</span></div><div class=\"line\">        <span class=\"comment\"># preservation kicks in.</span></div><div class=\"line\">        self._preserved_exc = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Functions that should be executed after the request on the response</span></div><div class=\"line\">        <span class=\"comment\"># object.  These will be called before the regular \"after_request\"</span></div><div class=\"line\">        <span class=\"comment\"># functions.</span></div><div class=\"line\">        self._after_request_functions = []</div><div class=\"line\"></div><div class=\"line\">        self.match_request()</div></pre></td></tr></table></figure>\n<h5 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h5><ul>\n<li><a href=\"http://www.pythondoc.com/flask/appcontext.html\" target=\"_blank\" rel=\"external\">Flask 应用上下文</a></li>\n<li><a href=\"http://www.pythondoc.com/flask/reqcontext.html\" target=\"_blank\" rel=\"external\">Flask 请求上下文</a></li>\n<li><a href=\"https://blog.tonyseek.com/post/the-context-mechanism-of-flask/\" target=\"_blank\" rel=\"external\">Flask 的 Context 机制</a></li>\n<li><a href=\"http://www.jianshu.com/p/7a7efbb7205f\" target=\"_blank\" rel=\"external\">Flask的Context(上下文)学习笔记</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008383197\" target=\"_blank\" rel=\"external\">flask 源码解析：上下文</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本文只是记录个人学习Flask上下文的一些理解. 关于上下文的理解和更多的信息, 可以参考最下方的参考文献!<br>Flask 中有两种上下文 请求上下文和应用上下文. </p>\n<h4 id=\"Werkzeug-实现的-Local-Stack-和-Local-Proxy\"><a href=\"#Werkzeug-实现的-Local-Stack-和-Local-Proxy\" class=\"headerlink\" title=\"Werkzeug 实现的 Local Stack 和 Local Proxy\"></a>Werkzeug 实现的 Local Stack 和 Local Proxy</h4><p>在了解Flask 上下文之前, 必须得先了解Werkzeug.local.Local</p>\n<p>Werkzeug 实现了一个Local类, 类似于ThreadLocal.</p>\n<p>首先我们看看ThreadLocal. ThreadLocal则是一种特殊的对象, 它的”状态”对线程隔离——也就是说每个线程对一个ThreadLocal对象的修改都不会影响其他线程. </p>\n<p>ThreadLocal的内部实现:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_local</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\" Thread-local data \"\"\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delattr__</span><span class=\"params\">(self, name)</span>:</span> <span class=\"comment\"># real signature unknown; restored from __doc__</span></div><div class=\"line\">        <span class=\"string\">\"\"\" x.__delattr__('name') &lt;==&gt; del x.name \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattribute__</span><span class=\"params\">(self, name)</span>:</span> <span class=\"comment\"># real signature unknown; restored from __doc__</span></div><div class=\"line\">        <span class=\"string\">\"\"\" x.__getattribute__('name') &lt;==&gt; x.name \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, *args, **kwargs)</span>:</span> <span class=\"comment\"># real signature unknown</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @staticmethod # known case of __new__</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__new__</span><span class=\"params\">(S, *more)</span>:</span> <span class=\"comment\"># real signature unknown; restored from __doc__</span></div><div class=\"line\">        <span class=\"string\">\"\"\" T.__new__(S, ...) -&gt; a new object with type S, a subtype of T \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, name, value)</span>:</span> <span class=\"comment\"># real signature unknown; restored from __doc__</span></div><div class=\"line\">        <span class=\"string\">\"\"\" x.__setattr__('name', value) &lt;==&gt; x.name = value \"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n<p>ThreadLocal Demo:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">thread_local = threading.local()</div><div class=\"line\">thread_local.main_id = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> thread_local.main_id     <span class=\"comment\"># 主线程里面, 打印结果为0</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppThread</span><span class=\"params\">(threading.Thread)</span>:</span></div><div class=\"line\">    num = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_num</span><span class=\"params\">(self, num)</span>:</span></div><div class=\"line\">        self.num = num</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        thread_local.main_id = self.num</div><div class=\"line\">        <span class=\"keyword\">print</span> thread_local.main_id      <span class=\"comment\"># 在这个线程里面, 修改mian_id值</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app_thread = AppThread()</div><div class=\"line\">app_thread.set_num(<span class=\"number\">4</span>)</div><div class=\"line\">app_thread.start()</div><div class=\"line\"><span class=\"keyword\">print</span> thread_local.main_id      <span class=\"comment\"># 主线程 main_id 没有改变</span></div></pre></td></tr></table></figure>\n<p>Werkzeug.local.Local类</p>\n<ul>\n<li>Werkzeug.local.Local会在Greenlet可用的情况下优先使用Greenlet的ID而不是线程ID以支持Gevent或Eventlet的调度; ThreadLocal只支持多线程调度</li>\n<li>Werkzeug.local.Local实现的<strong>release_local</strong>的方法, 可以被release_local函数释放掉当前线程下的状态, 源码中有Example</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">release_local</span><span class=\"params\">(local)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"Releases the contents of the local for the current context.</span></div><div class=\"line\">    This makes it possible to use locals without a manager.</div><div class=\"line\"></div><div class=\"line\">    Example::</div><div class=\"line\"></div><div class=\"line\">        &gt;&gt;&gt; loc = Local()</div><div class=\"line\">        &gt;&gt;&gt; loc.foo = 42</div><div class=\"line\">        &gt;&gt;&gt; release_local(loc)</div><div class=\"line\">        &gt;&gt;&gt; hasattr(loc, 'foo')</div><div class=\"line\">        False</div><div class=\"line\"></div><div class=\"line\">    With this function one can release :class:`Local` objects as well</div><div class=\"line\">    as :class:`LocalStack` objects.  However it is not possible to</div><div class=\"line\">    release data held by proxies that way, one always has to retain</div><div class=\"line\">    a reference to the underlying local object in order to be able</div><div class=\"line\">    to release it.</div><div class=\"line\"></div><div class=\"line\">    .. versionadded:: 0.6.1</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    local.__release_local__()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Local</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    __slots__ = (<span class=\"string\">'__storage__'</span>, <span class=\"string\">'__ident_func__'</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        object.__setattr__(self, <span class=\"string\">'__storage__'</span>, &#123;&#125;)</div><div class=\"line\">        object.__setattr__(self, <span class=\"string\">'__ident_func__'</span>, get_ident)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> iter(self.__storage__.items())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, proxy)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"Create a proxy for a name.\"\"\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> LocalProxy(self, proxy)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__release_local__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.__storage__.pop(self.__ident_func__(), <span class=\"keyword\">None</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getattr__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self.__storage__[self.__ident_func__()][name]</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(name)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__setattr__</span><span class=\"params\">(self, name, value)</span>:</span></div><div class=\"line\">        ident = self.__ident_func__()</div><div class=\"line\">        storage = self.__storage__</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            storage[ident][name] = value</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            storage[ident] = &#123;name: value&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__delattr__</span><span class=\"params\">(self, name)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">del</span> self.__storage__[self.__ident_func__()][name]</div><div class=\"line\">        <span class=\"keyword\">except</span> KeyError:</div><div class=\"line\">            <span class=\"keyword\">raise</span> AttributeError(name)</div></pre></td></tr></table></figure>\n<p>接下来我们来看看Werkzeug实现的LocalStack 和 LocalProxy</p>\n<p>LocalStack是用Werkzeug.local.Local实现的stack结构, 实现了pop, push以及top(快速拿到栈顶元素)等方法, 这些所有的操作都只在本线程可见.<br>LocaLStack也可以被release_local函数释放掉当前线程下的状态(它也实现了<strong>release_local</strong>方法)<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalStack</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"\"\"This class works similar to a :class:`Local` but keeps a stack</span></div><div class=\"line\">    of objects instead.  This is best explained with an example::</div><div class=\"line\"></div><div class=\"line\">        &gt;&gt;&gt; ls = LocalStack()</div><div class=\"line\">        &gt;&gt;&gt; ls.push(42)</div><div class=\"line\">        &gt;&gt;&gt; ls.top</div><div class=\"line\">        42</div><div class=\"line\">        &gt;&gt;&gt; ls.push(23)</div><div class=\"line\">        &gt;&gt;&gt; ls.top</div><div class=\"line\">        23</div><div class=\"line\">        &gt;&gt;&gt; ls.pop()</div><div class=\"line\">        23</div><div class=\"line\">        &gt;&gt;&gt; ls.top</div><div class=\"line\">        42</div><div class=\"line\"></div><div class=\"line\">    They can be force released by using a :class:`LocalManager` or with</div><div class=\"line\">    the :func:`release_local` function but the correct way is to pop the</div><div class=\"line\">    item from the stack after using.  When the stack is empty it will</div><div class=\"line\">    no longer be bound to the current context (and as such released).</div><div class=\"line\"></div><div class=\"line\">    By calling the stack without arguments it returns a proxy that resolves to</div><div class=\"line\">    the topmost item on the stack.</div><div class=\"line\"></div><div class=\"line\">    .. versionadded:: 0.6.1</div><div class=\"line\">    \"\"\"</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self._local = Local()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__release_local__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self._local.__release_local__()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_get__ident_func__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self._local.__ident_func__</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_set__ident_func__</span><span class=\"params\">(self, value)</span>:</span></div><div class=\"line\">        object.__setattr__(self._local, <span class=\"string\">'__ident_func__'</span>, value)</div><div class=\"line\">    __ident_func__ = property(_get__ident_func__, _set__ident_func__)</div><div class=\"line\">    <span class=\"keyword\">del</span> _get__ident_func__, _set__ident_func__</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_lookup</span><span class=\"params\">()</span>:</span></div><div class=\"line\">            rv = self.top</div><div class=\"line\">            <span class=\"keyword\">if</span> rv <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">                <span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">'object unbound'</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> rv</div><div class=\"line\">        <span class=\"keyword\">return</span> LocalProxy(_lookup)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self, obj)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"Pushes a new item to the stack\"\"\"</span></div><div class=\"line\">        rv = getattr(self._local, <span class=\"string\">'stack'</span>, <span class=\"keyword\">None</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> rv <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            self._local.stack = rv = []</div><div class=\"line\">        rv.append(obj)</div><div class=\"line\">        <span class=\"keyword\">return</span> rv</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"Removes the topmost item from the stack, will return the</span></div><div class=\"line\">        old value or `None` if the stack was already empty.</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        stack = getattr(self._local, <span class=\"string\">'stack'</span>, <span class=\"keyword\">None</span>)</div><div class=\"line\">        <span class=\"keyword\">if</span> stack <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> len(stack) == <span class=\"number\">1</span>:</div><div class=\"line\">            release_local(self._local)</div><div class=\"line\">            <span class=\"keyword\">return</span> stack[<span class=\"number\">-1</span>]</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> stack.pop()</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">top</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"\"The topmost item on the stack.  If the stack is empty,</span></div><div class=\"line\">        `None` is returned.</div><div class=\"line\">        \"\"\"</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> self._local.stack[<span class=\"number\">-1</span>]</div><div class=\"line\">        <span class=\"keyword\">except</span> (AttributeError, IndexError):</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div></pre></td></tr></table></figure></p>\n<p>LocalProxy则是一个典型的代理模式实现, LocalProxy接受一个callable的参数(比如一个函数)和一个string(可选), 这个参数被调用后本身应该是一个Werkzeug.local.Locald对象.<br>把这个对LocalProxy对象的所有操作, 包括属性访问, 方法调用, 甚至是二元操作都会转发到Werkzeug.local.Locald对象上, 并且设置这个这个对象的<strong>name</strong>=string</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@implements_bool</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalProxy</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">\"\"\"Acts as a proxy for a werkzeug local.  Forwards all operations to</span></div><div class=\"line\">    a proxied object.  The only operations not supported for forwarding</div><div class=\"line\">    are right handed operands and any kind of assignment.</div><div class=\"line\"></div><div class=\"line\">    Example usage::</div><div class=\"line\"></div><div class=\"line\">        from werkzeug.local import Local</div><div class=\"line\">        l = Local()</div><div class=\"line\"></div><div class=\"line\">        # these are proxies</div><div class=\"line\">        request = l('request')</div><div class=\"line\">        user = l('user')</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        from werkzeug.local import LocalStack</div><div class=\"line\">        _response_local = LocalStack()</div><div class=\"line\"></div><div class=\"line\">        # this is a proxy</div><div class=\"line\">        response = _response_local()</div><div class=\"line\"></div><div class=\"line\">    Whenever something is bound to l.user / l.request the proxy objects</div><div class=\"line\">    will forward all operations.  If no object is bound a :exc:`RuntimeError`</div><div class=\"line\">    will be raised.</div><div class=\"line\"></div><div class=\"line\">    To create proxies to :class:`Local` or :class:`LocalStack` objects,</div><div class=\"line\">    call the object as shown above.  If you want to have a proxy to an</div><div class=\"line\">    object looked up by a function, you can (as of Werkzeug 0.6.1) pass</div><div class=\"line\">    a function to the :class:`LocalProxy` constructor::</div><div class=\"line\"></div><div class=\"line\">        session = LocalProxy(lambda: get_current_request().session)</div><div class=\"line\"></div><div class=\"line\">    .. versionchanged:: 0.6.1</div><div class=\"line\">       The class can be instanciated with a callable as well now.</div><div class=\"line\">    \"\"\"</div></pre></td></tr></table></figure>\n<h4 id=\"wsgi-app\"><a href=\"#wsgi-app\" class=\"headerlink\" title=\"wsgi_app\"></a>wsgi_app</h4><ul>\n<li>第一步：生成request请求对象和请求上下文环境</li>\n<li>第二步：请求进入预处理，错误处理及请求转发到响应的过程</li>\n<li>第三步：请求分发 dispatch_request</li>\n<li>第四步：返回到wsgi_app内部</li>\n</ul>\n<p><img src=\"https://martin-upload.b0.upaiyun.com/web/2017/06/bf02aa078b9ba72d9fcda9b3b45125fd.jpeg\" alt=\"示例图\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wsgi_app</span><span class=\"params\">(self, environ, start_response)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"The actual WSGI application.  This is not implemented in</span></div><div class=\"line\">    `__call__` so that middlewares can be applied without losing a</div><div class=\"line\">    reference to the class.  So instead of doing this::</div><div class=\"line\"></div><div class=\"line\">        app = MyMiddleware(app)</div><div class=\"line\"></div><div class=\"line\">    It's a better idea to do this instead::</div><div class=\"line\"></div><div class=\"line\">        app.wsgi_app = MyMiddleware(app.wsgi_app)</div><div class=\"line\"></div><div class=\"line\">    Then you still have the original application object around and</div><div class=\"line\">    can continue to call methods on it.</div><div class=\"line\"></div><div class=\"line\">    .. versionchanged:: 0.7</div><div class=\"line\">       The behavior of the before and after request callbacks was changed</div><div class=\"line\">       under error conditions and a new callback was added that will</div><div class=\"line\">       always execute at the end of the request, independent on if an</div><div class=\"line\">       error occurred or not.  See :ref:`callbacks-and-errors`.</div><div class=\"line\"></div><div class=\"line\">    :param environ: a WSGI environment</div><div class=\"line\">    :param start_response: a callable accepting a status code,</div><div class=\"line\">                           a list of headers and an optional</div><div class=\"line\">                           exception context to start the response</div><div class=\"line\">    \"\"\"</div><div class=\"line\">    ctx = self.request_context(environ)</div><div class=\"line\">    ctx.push()</div><div class=\"line\">    error = <span class=\"keyword\">None</span></div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            response = self.full_dispatch_request()</div><div class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</div><div class=\"line\">            error = e</div><div class=\"line\">            response = self.make_response(self.handle_exception(e))</div><div class=\"line\">        <span class=\"keyword\">return</span> response(environ, start_response)</div><div class=\"line\">    <span class=\"keyword\">finally</span>:</div><div class=\"line\">        <span class=\"keyword\">if</span> self.should_ignore_error(error):</div><div class=\"line\">            error = <span class=\"keyword\">None</span></div><div class=\"line\">        ctx.auto_pop(error)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span><span class=\"params\">(self, environ, start_response)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"Shortcut for :attr:`wsgi_app`.\"\"\"</span></div><div class=\"line\">    <span class=\"keyword\">return</span> self.wsgi_app(environ, start_response)</div></pre></td></tr></table></figure>\n<h4 id=\"应用上下文-AppContext\"><a href=\"#应用上下文-AppContext\" class=\"headerlink\" title=\"应用上下文 AppContext\"></a>应用上下文 AppContext</h4><p>应用上下文会在合适的时间创建和销毁, 它不会在线程中移动, 并且也不会在不同的请求之间共享, 所以它一般用来存储数据库连接信息或者别的东西的最佳位置.<br>当<code>app = Flask(__name__)</code>构造出一个Flask App的时候, AppContext并不会自动推入到_app_ctx_stack中,<br>如果你使用Flask-SQLAlchemy, 需要写一个离线脚本时候, 你就会知道这其中的坑(RuntimeError).<br>解决的办法是: 在运行离线脚本之前, 先将App的AppContext PUSH到_app_ctx_stack中, <code>ctx = app.app_context()  ctx.push()</code><br>但是当我们正常跑Flask服务的时候, 是不需要手动push. 推入部分的逻辑有这样一条：如果发现 _app_ctx_stack 为空，则隐式地推入一个AppContext。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">flask.globals.py</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_lookup_app_object</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    top = _app_ctx_stack.top</div><div class=\"line\">    <span class=\"keyword\">if</span> top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> RuntimeError(_app_ctx_err_msg)</div><div class=\"line\">    <span class=\"keyword\">return</span> getattr(top, name)</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_find_app</span><span class=\"params\">()</span>:</span></div><div class=\"line\">    top = _app_ctx_stack.top</div><div class=\"line\">    <span class=\"keyword\">if</span> top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> RuntimeError(_app_ctx_err_msg)</div><div class=\"line\">    <span class=\"keyword\">return</span> top.app</div><div class=\"line\"></div><div class=\"line\">_app_ctx_stack = LocalStack()</div><div class=\"line\">current_app = LocalProxy(_find_app)</div><div class=\"line\">g = LocalProxy(partial(_lookup_app_object, <span class=\"string\">'g'</span>))</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppContext</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"The application context binds an application object implicitly</span></div><div class=\"line\">    to the current thread or greenlet, similar to how the</div><div class=\"line\">    :class:`RequestContext` binds request information.  The application</div><div class=\"line\">    context is also implicitly created if a request context is created</div><div class=\"line\">    but the application is not on top of the individual application</div><div class=\"line\">    context.</div><div class=\"line\">    \"\"\"</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, app)</span>:</span></div><div class=\"line\">        self.app = app</div><div class=\"line\">        self.url_adapter = app.create_url_adapter(<span class=\"keyword\">None</span>)</div><div class=\"line\">        self.g = app.app_ctx_globals_class()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Like request context, app contexts can be pushed multiple times</span></div><div class=\"line\">        <span class=\"comment\"># but there a basic \"refcount\" is enough to track them.</span></div><div class=\"line\">        self._refcnt = <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<h4 id=\"请求上下文-RequestContext\"><a href=\"#请求上下文-RequestContext\" class=\"headerlink\" title=\"请求上下文 RequestContext\"></a>请求上下文 RequestContext</h4><p>request和session都属于请求上下文<br>request 针对的是http请求作为对象<br>session 针对的是更多是用户信息作为对象</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_lookup_req_object</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">    top = _request_ctx_stack.top</div><div class=\"line\">    <span class=\"keyword\">if</span> top <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">        <span class=\"keyword\">raise</span> RuntimeError(_request_ctx_err_msg)</div><div class=\"line\">    <span class=\"keyword\">return</span> getattr(top, name)</div><div class=\"line\"></div><div class=\"line\">_request_ctx_stack = LocalStack()</div><div class=\"line\">request = LocalProxy(partial(_lookup_req_object, <span class=\"string\">'request'</span>))</div><div class=\"line\">session = LocalProxy(partial(_lookup_req_object, <span class=\"string\">'session'</span>))</div></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestContext</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"\"The request context contains all request relevant information.  It is</span></div><div class=\"line\">    created at the beginning of the request and pushed to the</div><div class=\"line\">    `_request_ctx_stack` and removed at the end of it.  It will create the</div><div class=\"line\">    URL adapter and request object for the WSGI environment provided.</div><div class=\"line\"></div><div class=\"line\">    Do not attempt to use this class directly, instead use</div><div class=\"line\">    :meth:`~flask.Flask.test_request_context` and</div><div class=\"line\">    :meth:`~flask.Flask.request_context` to create this object.</div><div class=\"line\"></div><div class=\"line\">    When the request context is popped, it will evaluate all the</div><div class=\"line\">    functions registered on the application for teardown execution</div><div class=\"line\">    (:meth:`~flask.Flask.teardown_request`).</div><div class=\"line\"></div><div class=\"line\">    The request context is automatically popped at the end of the request</div><div class=\"line\">    for you.  In debug mode the request context is kept around if</div><div class=\"line\">    exceptions happen so that interactive debuggers have a chance to</div><div class=\"line\">    introspect the data.  With 0.4 this can also be forced for requests</div><div class=\"line\">    that did not fail and outside of ``DEBUG`` mode.  By setting</div><div class=\"line\">    ``'flask._preserve_context'`` to ``True`` on the WSGI environment the</div><div class=\"line\">    context will not pop itself at the end of the request.  This is used by</div><div class=\"line\">    the :meth:`~flask.Flask.test_client` for example to implement the</div><div class=\"line\">    deferred cleanup functionality.</div><div class=\"line\"></div><div class=\"line\">    You might find this helpful for unittests where you need the</div><div class=\"line\">    information from the context local around for a little longer.  Make</div><div class=\"line\">    sure to properly :meth:`~werkzeug.LocalStack.pop` the stack yourself in</div><div class=\"line\">    that situation, otherwise your unittests will leak memory.</div><div class=\"line\">    \"\"\"</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, app, environ, request=None)</span>:</span></div><div class=\"line\">        self.app = app</div><div class=\"line\">        <span class=\"keyword\">if</span> request <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</div><div class=\"line\">            request = app.request_class(environ)</div><div class=\"line\">        self.request = request</div><div class=\"line\">        self.url_adapter = app.create_url_adapter(self.request)</div><div class=\"line\">        self.flashes = <span class=\"keyword\">None</span></div><div class=\"line\">        self.session = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Request contexts can be pushed multiple times and interleaved with</span></div><div class=\"line\">        <span class=\"comment\"># other request contexts.  Now only if the last level is popped we</span></div><div class=\"line\">        <span class=\"comment\"># get rid of them.  Additionally if an application context is missing</span></div><div class=\"line\">        <span class=\"comment\"># one is created implicitly so for each level we add this information</span></div><div class=\"line\">        self._implicit_app_ctx_stack = []</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># indicator if the context was preserved.  Next time another context</span></div><div class=\"line\">        <span class=\"comment\"># is pushed the preserved context is popped.</span></div><div class=\"line\">        self.preserved = <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># remembers the exception for pop if there is one in case the context</span></div><div class=\"line\">        <span class=\"comment\"># preservation kicks in.</span></div><div class=\"line\">        self._preserved_exc = <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># Functions that should be executed after the request on the response</span></div><div class=\"line\">        <span class=\"comment\"># object.  These will be called before the regular \"after_request\"</span></div><div class=\"line\">        <span class=\"comment\"># functions.</span></div><div class=\"line\">        self._after_request_functions = []</div><div class=\"line\"></div><div class=\"line\">        self.match_request()</div></pre></td></tr></table></figure>\n<h5 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h5><ul>\n<li><a href=\"http://www.pythondoc.com/flask/appcontext.html\" target=\"_blank\" rel=\"external\">Flask 应用上下文</a></li>\n<li><a href=\"http://www.pythondoc.com/flask/reqcontext.html\" target=\"_blank\" rel=\"external\">Flask 请求上下文</a></li>\n<li><a href=\"https://blog.tonyseek.com/post/the-context-mechanism-of-flask/\" target=\"_blank\" rel=\"external\">Flask 的 Context 机制</a></li>\n<li><a href=\"http://www.jianshu.com/p/7a7efbb7205f\" target=\"_blank\" rel=\"external\">Flask的Context(上下文)学习笔记</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000008383197\" target=\"_blank\" rel=\"external\">flask 源码解析：上下文</a></li>\n</ul>\n"},{"layout":"http_layout","title":"HTTP的一些零散的知识点","date":"2017-05-27T03:50:05.000Z","comments":1,"_content":"\n#### 请求方式\n\n根据HTTP标准, HTTP请求可以使用多种请求方法.\nHTTP1.0定义了三种请求方法: GET, POST 和 HEAD方法.\nHTTP1.1新增了五种请求方法: OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法.\n\n* Get\n\n* Post\n\n* Put\n\n* Delete\n\n* Trace\n\n* Connect\n\n* Options\n\n* Head\n\n\n#### [Session](http://baike.baidu.com/link?url=7iUfdIN-T5IrrqaGndSHxoVZqRzDs8Gp5aFyVBhD5tLQb7zD6kTAN3wdFQfpl0YCr1tysE_dE9p5trpOodPV0K) 和 [Cookie](http://baike.baidu.com/link?url=-U4M-O34JWPr-fvQ9Wh5D0V7eMvP-hsWueRcKFY3tnnkUVioYOpJ8gzMX4sgEYLGT9FBepwQG6D6MJtefeacoK)\n\n* Session\n    > 在计算机中, 尤其是在网络应用中, 称为\"会话控制\". session对象存储特定用户会话所需的属性及配置信息\n    > session是用于保持状态的基于Web服务器的方法. session允许通过将对象存储在Web服务器的内存中在整个用户会话过程中保持任何对象\n\n* Cookie\n    > 指某些网站为了辨别用户身份, 进行session跟踪而储存在用户本地终端上的数据; 在计算机中是个存储在浏览器目录中的文本文件, 它可以包含有关用户的信息.\n\n* 比较\n    * cookie数据存放在客户的浏览器上, session数据放在服务器上\n    * cookie不是很安全, 别人可以分析存放在本地的cookie并进行cookie欺骗, 如果主要考虑到安全应当使用session\n    * session会在一定时间内保存在服务器上. 当访问增多, 会比较占用你服务器的性能, 如果主要考虑到减轻服务器性能方面, 应当使用cookie\n    * 不同浏览器对cookie处理是不一样的, 如果客户端禁止cookie, 则cookie不能建立\n    * 并且在客户端, 一个浏览器能创建的cookie数量最多为300个, 并且每个不能超过4KB, 每个Web站点能设置的cookie总数不能超过20个\n\n#### [状态码](http://www.runoob.com/http/http-status-codes.html)\n\n当浏览者访问一个网页时, 浏览者的浏览器会向网页所在服务器发出请求. 当浏览器接收并显示网页前, \n此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求.\nHTTP状态码的英文为HTTP Status Code.\n\n* 1** -- 信息, 服务器收到请求, 需要请求者继续执行操作\n\n* 2** -- 成功, 操作被成功接收并处理\n\n* 3** -- 重定向, 需要进一步的操作以完成请求\n\n* 4** -- 客户端错误, 请求包含语法错误或无法完成请求\n\n* 5** -- 服务器错误, 服务器在处理请求的过程中发生了错误\n\n\n\n\n","source":"_posts/http.md","raw":"layout: http_layout\ntitle: HTTP的一些零散的知识点\ndate: 2017-05-27 11:50:05\ntags: 重点\ncomments: true\ncategories: Http\n\n---\n\n#### 请求方式\n\n根据HTTP标准, HTTP请求可以使用多种请求方法.\nHTTP1.0定义了三种请求方法: GET, POST 和 HEAD方法.\nHTTP1.1新增了五种请求方法: OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法.\n\n* Get\n\n* Post\n\n* Put\n\n* Delete\n\n* Trace\n\n* Connect\n\n* Options\n\n* Head\n\n\n#### [Session](http://baike.baidu.com/link?url=7iUfdIN-T5IrrqaGndSHxoVZqRzDs8Gp5aFyVBhD5tLQb7zD6kTAN3wdFQfpl0YCr1tysE_dE9p5trpOodPV0K) 和 [Cookie](http://baike.baidu.com/link?url=-U4M-O34JWPr-fvQ9Wh5D0V7eMvP-hsWueRcKFY3tnnkUVioYOpJ8gzMX4sgEYLGT9FBepwQG6D6MJtefeacoK)\n\n* Session\n    > 在计算机中, 尤其是在网络应用中, 称为\"会话控制\". session对象存储特定用户会话所需的属性及配置信息\n    > session是用于保持状态的基于Web服务器的方法. session允许通过将对象存储在Web服务器的内存中在整个用户会话过程中保持任何对象\n\n* Cookie\n    > 指某些网站为了辨别用户身份, 进行session跟踪而储存在用户本地终端上的数据; 在计算机中是个存储在浏览器目录中的文本文件, 它可以包含有关用户的信息.\n\n* 比较\n    * cookie数据存放在客户的浏览器上, session数据放在服务器上\n    * cookie不是很安全, 别人可以分析存放在本地的cookie并进行cookie欺骗, 如果主要考虑到安全应当使用session\n    * session会在一定时间内保存在服务器上. 当访问增多, 会比较占用你服务器的性能, 如果主要考虑到减轻服务器性能方面, 应当使用cookie\n    * 不同浏览器对cookie处理是不一样的, 如果客户端禁止cookie, 则cookie不能建立\n    * 并且在客户端, 一个浏览器能创建的cookie数量最多为300个, 并且每个不能超过4KB, 每个Web站点能设置的cookie总数不能超过20个\n\n#### [状态码](http://www.runoob.com/http/http-status-codes.html)\n\n当浏览者访问一个网页时, 浏览者的浏览器会向网页所在服务器发出请求. 当浏览器接收并显示网页前, \n此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求.\nHTTP状态码的英文为HTTP Status Code.\n\n* 1** -- 信息, 服务器收到请求, 需要请求者继续执行操作\n\n* 2** -- 成功, 操作被成功接收并处理\n\n* 3** -- 重定向, 需要进一步的操作以完成请求\n\n* 4** -- 客户端错误, 请求包含语法错误或无法完成请求\n\n* 5** -- 服务器错误, 服务器在处理请求的过程中发生了错误\n\n\n\n\n","slug":"http","published":1,"updated":"2017-06-05T11:04:47.452Z","photos":[],"link":"","_id":"cj3l060xg0007nzy65lazzowb","content":"<h4 id=\"请求方式\"><a href=\"#请求方式\" class=\"headerlink\" title=\"请求方式\"></a>请求方式</h4><p>根据HTTP标准, HTTP请求可以使用多种请求方法.<br>HTTP1.0定义了三种请求方法: GET, POST 和 HEAD方法.<br>HTTP1.1新增了五种请求方法: OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法.</p>\n<ul>\n<li><p>Get</p>\n</li>\n<li><p>Post</p>\n</li>\n<li><p>Put</p>\n</li>\n<li><p>Delete</p>\n</li>\n<li><p>Trace</p>\n</li>\n<li><p>Connect</p>\n</li>\n<li><p>Options</p>\n</li>\n<li><p>Head</p>\n</li>\n</ul>\n<h4 id=\"Session-和-Cookie\"><a href=\"#Session-和-Cookie\" class=\"headerlink\" title=\"Session 和 Cookie\"></a><a href=\"http://baike.baidu.com/link?url=7iUfdIN-T5IrrqaGndSHxoVZqRzDs8Gp5aFyVBhD5tLQb7zD6kTAN3wdFQfpl0YCr1tysE_dE9p5trpOodPV0K\" target=\"_blank\" rel=\"external\">Session</a> 和 <a href=\"http://baike.baidu.com/link?url=-U4M-O34JWPr-fvQ9Wh5D0V7eMvP-hsWueRcKFY3tnnkUVioYOpJ8gzMX4sgEYLGT9FBepwQG6D6MJtefeacoK\" target=\"_blank\" rel=\"external\">Cookie</a></h4><ul>\n<li><p>Session</p>\n<blockquote>\n<p>在计算机中, 尤其是在网络应用中, 称为”会话控制”. session对象存储特定用户会话所需的属性及配置信息<br>session是用于保持状态的基于Web服务器的方法. session允许通过将对象存储在Web服务器的内存中在整个用户会话过程中保持任何对象</p>\n</blockquote>\n</li>\n<li><p>Cookie</p>\n<blockquote>\n<p>指某些网站为了辨别用户身份, 进行session跟踪而储存在用户本地终端上的数据; 在计算机中是个存储在浏览器目录中的文本文件, 它可以包含有关用户的信息.</p>\n</blockquote>\n</li>\n<li><p>比较</p>\n<ul>\n<li>cookie数据存放在客户的浏览器上, session数据放在服务器上</li>\n<li>cookie不是很安全, 别人可以分析存放在本地的cookie并进行cookie欺骗, 如果主要考虑到安全应当使用session</li>\n<li>session会在一定时间内保存在服务器上. 当访问增多, 会比较占用你服务器的性能, 如果主要考虑到减轻服务器性能方面, 应当使用cookie</li>\n<li>不同浏览器对cookie处理是不一样的, 如果客户端禁止cookie, 则cookie不能建立</li>\n<li>并且在客户端, 一个浏览器能创建的cookie数量最多为300个, 并且每个不能超过4KB, 每个Web站点能设置的cookie总数不能超过20个</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a><a href=\"http://www.runoob.com/http/http-status-codes.html\" target=\"_blank\" rel=\"external\">状态码</a></h4><p>当浏览者访问一个网页时, 浏览者的浏览器会向网页所在服务器发出请求. 当浏览器接收并显示网页前,<br>此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求.<br>HTTP状态码的英文为HTTP Status Code.</p>\n<ul>\n<li><p>1** – 信息, 服务器收到请求, 需要请求者继续执行操作</p>\n</li>\n<li><p>2** – 成功, 操作被成功接收并处理</p>\n</li>\n<li><p>3** – 重定向, 需要进一步的操作以完成请求</p>\n</li>\n<li><p>4** – 客户端错误, 请求包含语法错误或无法完成请求</p>\n</li>\n<li><p>5** – 服务器错误, 服务器在处理请求的过程中发生了错误</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"请求方式\"><a href=\"#请求方式\" class=\"headerlink\" title=\"请求方式\"></a>请求方式</h4><p>根据HTTP标准, HTTP请求可以使用多种请求方法.<br>HTTP1.0定义了三种请求方法: GET, POST 和 HEAD方法.<br>HTTP1.1新增了五种请求方法: OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法.</p>\n<ul>\n<li><p>Get</p>\n</li>\n<li><p>Post</p>\n</li>\n<li><p>Put</p>\n</li>\n<li><p>Delete</p>\n</li>\n<li><p>Trace</p>\n</li>\n<li><p>Connect</p>\n</li>\n<li><p>Options</p>\n</li>\n<li><p>Head</p>\n</li>\n</ul>\n<h4 id=\"Session-和-Cookie\"><a href=\"#Session-和-Cookie\" class=\"headerlink\" title=\"Session 和 Cookie\"></a><a href=\"http://baike.baidu.com/link?url=7iUfdIN-T5IrrqaGndSHxoVZqRzDs8Gp5aFyVBhD5tLQb7zD6kTAN3wdFQfpl0YCr1tysE_dE9p5trpOodPV0K\" target=\"_blank\" rel=\"external\">Session</a> 和 <a href=\"http://baike.baidu.com/link?url=-U4M-O34JWPr-fvQ9Wh5D0V7eMvP-hsWueRcKFY3tnnkUVioYOpJ8gzMX4sgEYLGT9FBepwQG6D6MJtefeacoK\" target=\"_blank\" rel=\"external\">Cookie</a></h4><ul>\n<li><p>Session</p>\n<blockquote>\n<p>在计算机中, 尤其是在网络应用中, 称为”会话控制”. session对象存储特定用户会话所需的属性及配置信息<br>session是用于保持状态的基于Web服务器的方法. session允许通过将对象存储在Web服务器的内存中在整个用户会话过程中保持任何对象</p>\n</blockquote>\n</li>\n<li><p>Cookie</p>\n<blockquote>\n<p>指某些网站为了辨别用户身份, 进行session跟踪而储存在用户本地终端上的数据; 在计算机中是个存储在浏览器目录中的文本文件, 它可以包含有关用户的信息.</p>\n</blockquote>\n</li>\n<li><p>比较</p>\n<ul>\n<li>cookie数据存放在客户的浏览器上, session数据放在服务器上</li>\n<li>cookie不是很安全, 别人可以分析存放在本地的cookie并进行cookie欺骗, 如果主要考虑到安全应当使用session</li>\n<li>session会在一定时间内保存在服务器上. 当访问增多, 会比较占用你服务器的性能, 如果主要考虑到减轻服务器性能方面, 应当使用cookie</li>\n<li>不同浏览器对cookie处理是不一样的, 如果客户端禁止cookie, 则cookie不能建立</li>\n<li>并且在客户端, 一个浏览器能创建的cookie数量最多为300个, 并且每个不能超过4KB, 每个Web站点能设置的cookie总数不能超过20个</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a><a href=\"http://www.runoob.com/http/http-status-codes.html\" target=\"_blank\" rel=\"external\">状态码</a></h4><p>当浏览者访问一个网页时, 浏览者的浏览器会向网页所在服务器发出请求. 当浏览器接收并显示网页前,<br>此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求.<br>HTTP状态码的英文为HTTP Status Code.</p>\n<ul>\n<li><p>1** – 信息, 服务器收到请求, 需要请求者继续执行操作</p>\n</li>\n<li><p>2** – 成功, 操作被成功接收并处理</p>\n</li>\n<li><p>3** – 重定向, 需要进一步的操作以完成请求</p>\n</li>\n<li><p>4** – 客户端错误, 请求包含语法错误或无法完成请求</p>\n</li>\n<li><p>5** – 服务器错误, 服务器在处理请求的过程中发生了错误</p>\n</li>\n</ul>\n"},{"layout":"first_layout","title":"index","date":"2016-09-18T05:12:05.000Z","comments":1,"_content":"### SimpleHttpServer 简单文件传输\n+ python -m SimpleHTTPServer \n> 执行这个命令，就会在当前目录先启动一个简单的httpserver，在其他的服务器上通过ip+8000端口就可以下载到开启httpserver的服务器上当前目录下的文件,例如我在192.168.1.2的服务器上\n\n```\n▸ captcha_crack/\n▾ data/\n    simplehttpserver.txt\n    test.py\n```\n\ndata目录下执行python -m SimpleHTTPServer\n在另外一台服务器shell下执行wget 192.168.1.2:8000/test.py就可以把test.py下载下来\n\n\n### Nohup 后台执行任务\n```\nnohup python test.py &\n```\n像上面这样运行test.py脚本，这个进程会切换后台，即使在你的登录端退出，这个进程也会继续执行。\n\n### Supervisor 进程管理\nubuntu下安装\n```\napt-get install supervisor\n```\n为自己的进程配置一个conf文件，放在`/etc/supervisor/conf.d/`文件后缀为`.conf`\n\n```supervisorctl -c /etc/supervisor.conf reload```\n\n让你的配置文件生效(这里比较暴力，重新载入了supervisor的所有配置，更多方法前往[supervisor](http://supervisord.org/))\n\n\n### Tmux 终端控制台\n+ 窗口\n+ 窗格\n+ 会话\n \n想了解更多情前往[tmux](http://tmux.github.io/)\n\n### Ssh 远程登录\n* 创建key \n \n```\nssh-keygen -t rsa -C 'your word'\n```\n\n想了解更多请前往[ssh中文手册](http://linux.chinaunix.net/techdoc/beginner/2010/01/12/1153509.shtml)","source":"_posts/index.md","raw":"layout: first_layout\ntitle: index\ndate: 2016-09-18 13:12:05\ntags: 普通\ncomments: true\ncategories: Python\n\n---\n### SimpleHttpServer 简单文件传输\n+ python -m SimpleHTTPServer \n> 执行这个命令，就会在当前目录先启动一个简单的httpserver，在其他的服务器上通过ip+8000端口就可以下载到开启httpserver的服务器上当前目录下的文件,例如我在192.168.1.2的服务器上\n\n```\n▸ captcha_crack/\n▾ data/\n    simplehttpserver.txt\n    test.py\n```\n\ndata目录下执行python -m SimpleHTTPServer\n在另外一台服务器shell下执行wget 192.168.1.2:8000/test.py就可以把test.py下载下来\n\n\n### Nohup 后台执行任务\n```\nnohup python test.py &\n```\n像上面这样运行test.py脚本，这个进程会切换后台，即使在你的登录端退出，这个进程也会继续执行。\n\n### Supervisor 进程管理\nubuntu下安装\n```\napt-get install supervisor\n```\n为自己的进程配置一个conf文件，放在`/etc/supervisor/conf.d/`文件后缀为`.conf`\n\n```supervisorctl -c /etc/supervisor.conf reload```\n\n让你的配置文件生效(这里比较暴力，重新载入了supervisor的所有配置，更多方法前往[supervisor](http://supervisord.org/))\n\n\n### Tmux 终端控制台\n+ 窗口\n+ 窗格\n+ 会话\n \n想了解更多情前往[tmux](http://tmux.github.io/)\n\n### Ssh 远程登录\n* 创建key \n \n```\nssh-keygen -t rsa -C 'your word'\n```\n\n想了解更多请前往[ssh中文手册](http://linux.chinaunix.net/techdoc/beginner/2010/01/12/1153509.shtml)","slug":"index","published":1,"updated":"2017-06-05T11:04:47.452Z","photos":[],"link":"","_id":"cj3l060xq0009nzy6k832zu9v","content":"<h3 id=\"SimpleHttpServer-简单文件传输\"><a href=\"#SimpleHttpServer-简单文件传输\" class=\"headerlink\" title=\"SimpleHttpServer 简单文件传输\"></a>SimpleHttpServer 简单文件传输</h3><ul>\n<li>python -m SimpleHTTPServer <blockquote>\n<p>执行这个命令，就会在当前目录先启动一个简单的httpserver，在其他的服务器上通过ip+8000端口就可以下载到开启httpserver的服务器上当前目录下的文件,例如我在192.168.1.2的服务器上</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">▸ captcha_crack/</div><div class=\"line\">▾ data/</div><div class=\"line\">    simplehttpserver.txt</div><div class=\"line\">    test.py</div></pre></td></tr></table></figure>\n<p>data目录下执行python -m SimpleHTTPServer<br>在另外一台服务器shell下执行wget 192.168.1.2:8000/test.py就可以把test.py下载下来</p>\n<h3 id=\"Nohup-后台执行任务\"><a href=\"#Nohup-后台执行任务\" class=\"headerlink\" title=\"Nohup 后台执行任务\"></a>Nohup 后台执行任务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup python test.py &amp;</div></pre></td></tr></table></figure>\n<p>像上面这样运行test.py脚本，这个进程会切换后台，即使在你的登录端退出，这个进程也会继续执行。</p>\n<h3 id=\"Supervisor-进程管理\"><a href=\"#Supervisor-进程管理\" class=\"headerlink\" title=\"Supervisor 进程管理\"></a>Supervisor 进程管理</h3><p>ubuntu下安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install supervisor</div></pre></td></tr></table></figure></p>\n<p>为自己的进程配置一个conf文件，放在<code>/etc/supervisor/conf.d/</code>文件后缀为<code>.conf</code></p>\n<figure class=\"highlight plain\"><figcaption><span>-c</span><a href=\"/etc/supervisor.conf\">reload```</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">让你的配置文件生效(这里比较暴力，重新载入了supervisor的所有配置，更多方法前往[supervisor](http://supervisord.org/))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### Tmux 终端控制台</div><div class=\"line\">+ 窗口</div><div class=\"line\">+ 窗格</div><div class=\"line\">+ 会话</div><div class=\"line\"> </div><div class=\"line\">想了解更多情前往[tmux](http://tmux.github.io/)</div><div class=\"line\"></div><div class=\"line\">### Ssh 远程登录</div><div class=\"line\">* 创建key</div></pre></td></tr></table></figure>\n<p>ssh-keygen -t rsa -C ‘your word’<br>```</p>\n<p>想了解更多请前往<a href=\"http://linux.chinaunix.net/techdoc/beginner/2010/01/12/1153509.shtml\" target=\"_blank\" rel=\"external\">ssh中文手册</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"SimpleHttpServer-简单文件传输\"><a href=\"#SimpleHttpServer-简单文件传输\" class=\"headerlink\" title=\"SimpleHttpServer 简单文件传输\"></a>SimpleHttpServer 简单文件传输</h3><ul>\n<li>python -m SimpleHTTPServer <blockquote>\n<p>执行这个命令，就会在当前目录先启动一个简单的httpserver，在其他的服务器上通过ip+8000端口就可以下载到开启httpserver的服务器上当前目录下的文件,例如我在192.168.1.2的服务器上</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">▸ captcha_crack/</div><div class=\"line\">▾ data/</div><div class=\"line\">    simplehttpserver.txt</div><div class=\"line\">    test.py</div></pre></td></tr></table></figure>\n<p>data目录下执行python -m SimpleHTTPServer<br>在另外一台服务器shell下执行wget 192.168.1.2:8000/test.py就可以把test.py下载下来</p>\n<h3 id=\"Nohup-后台执行任务\"><a href=\"#Nohup-后台执行任务\" class=\"headerlink\" title=\"Nohup 后台执行任务\"></a>Nohup 后台执行任务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nohup python test.py &amp;</div></pre></td></tr></table></figure>\n<p>像上面这样运行test.py脚本，这个进程会切换后台，即使在你的登录端退出，这个进程也会继续执行。</p>\n<h3 id=\"Supervisor-进程管理\"><a href=\"#Supervisor-进程管理\" class=\"headerlink\" title=\"Supervisor 进程管理\"></a>Supervisor 进程管理</h3><p>ubuntu下安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get install supervisor</div></pre></td></tr></table></figure></p>\n<p>为自己的进程配置一个conf文件，放在<code>/etc/supervisor/conf.d/</code>文件后缀为<code>.conf</code></p>\n<figure class=\"highlight plain\"><figcaption><span>-c</span><a href=\"/etc/supervisor.conf\">reload```</a></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">让你的配置文件生效(这里比较暴力，重新载入了supervisor的所有配置，更多方法前往[supervisor](http://supervisord.org/))</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">### Tmux 终端控制台</div><div class=\"line\">+ 窗口</div><div class=\"line\">+ 窗格</div><div class=\"line\">+ 会话</div><div class=\"line\"> </div><div class=\"line\">想了解更多情前往[tmux](http://tmux.github.io/)</div><div class=\"line\"></div><div class=\"line\">### Ssh 远程登录</div><div class=\"line\">* 创建key</div></pre></td></tr></table></figure>\n<p>ssh-keygen -t rsa -C ‘your word’<br>```</p>\n<p>想了解更多请前往<a href=\"http://linux.chinaunix.net/techdoc/beginner/2010/01/12/1153509.shtml\" target=\"_blank\" rel=\"external\">ssh中文手册</a></p>\n"},{"layout":"python_list_layout","title":"Python list的简单实现","date":"2017-05-24T09:12:05.000Z","comments":1,"_content":"### Python list的简单实现\n\n> 这里我主要实现了一下几个功能: append, pop, index, length写的比较乱\n> 思路上大致就是\n\n> * 设计每个节点的属性, 最简单的是每个几点只保存当前的值和指向下一个节点点指针, 我这里增加了当前节点的index, 以及指向前一个节点的指针\n> * 设计链表的操作, append, pop, index, length\n> * 可以在此基础上, 再实现insert, extend 等操作\n\n```python\n                \n        #!/usr/bin/env python\n        # coding: utf-8\n        \n        \n        class Node(object):\n        \n            def __init__(self, value, next_node=None, pre_node=None):\n                self.value = value\n                self.index = 0\n                self.next_node = next_node\n                self.pre_node = pre_node\n        \n            def get_next_node(self):\n                return self.next_node\n        \n            def set_next_node(self, new_node):\n                self.next_node = new_node\n        \n            def get_pre_node(self):\n                return self.pre_node\n        \n            def set_pre_node(self, pre_node):\n                self.pre_node = pre_node\n        \n            def set_index(self, num):\n                self.index = num\n        \n            def __str__(self):\n                return str(self.value)\n        \n        \n        class MyList(object):\n        \n            def __init__(self):\n                self.start = Node\n                self.head = None\n                self.size = 0\n        \n            def _current_node(self):\n                if not self.head:\n                    current = None\n                else:\n                    current = self.head\n                    while current.get_next_node():\n                        current = current.get_next_node()\n                return current\n        \n            def init_head(self):\n                c = None\n                index = 0\n                if self.start:\n                    c = self.start\n                    c.index = 0\n                    while c.get_next_node():\n                        c = c.next_node\n                        index += 1\n                        c.index = index\n                return c\n        \n            def append(self, item):\n                node = Node(item)\n                node.set_index(self.size)\n                node.set_pre_node(self.head)\n                current = self._current_node()\n                if current:\n                    current.set_next_node(node)\n                else:\n                    self.start = node\n                self.head = node\n                self.size += 1\n                return 0\n        \n            def pop(self, index=None):\n                if index > self.size - 1 or index < 0:\n                    return None\n                elif index is None or index == self.size - 1:\n                    if not self.head:\n                        return None\n                    head = self.head\n                    self.head = head.get_pre_node()\n                    self.head.set_next_node(None)\n                    return head\n                else:\n                    if self.start:\n                        c = self.index(index)\n                        c_next = c.get_next_node()\n                        c_pre = c.get_pre_node()\n                        if c_pre:\n                            c_pre.set_next_node(c_next)\n                        if c_next:\n                            c_next.set_pre_node(c_pre)\n                        self.head = self.init_head()\n                        return c\n                    else:\n                        return None\n        \n            def index(self, num):\n                c = self.start\n                if c.index == num:\n                    return c\n                while c.get_next_node():\n                    c = c.next_node\n                    if c.index == num:\n                        break\n                return c\n        \n            @property\n            def length(self):\n                return self.size\n        \n            def __str__(self):\n                string = '['\n                if self.start:\n                    string += str(self.start.value)\n                    c = self.start\n                    while c.get_next_node():\n                        c = c.next_node\n                        string += ', ' + str(c.value)\n                string += ']'\n                return string\n        \n        \n        if __name__ == '__main__':\n            l = MyList()\n            l.append(9)\n            l.append(10)\n            l.append(90808098)\n            l.append('asdjkad')\n            l.append('ssss')\n            print l, l.length\n            print l.index(0)\n            print l.pop(0)\n```\n","source":"_posts/mylist.md","raw":"layout: python_list_layout\ntitle: Python list的简单实现\ndate: 2017-05-24 17:12:05\ntags: 重点\ncomments: true\ncategories: Python\n\n---\n### Python list的简单实现\n\n> 这里我主要实现了一下几个功能: append, pop, index, length写的比较乱\n> 思路上大致就是\n\n> * 设计每个节点的属性, 最简单的是每个几点只保存当前的值和指向下一个节点点指针, 我这里增加了当前节点的index, 以及指向前一个节点的指针\n> * 设计链表的操作, append, pop, index, length\n> * 可以在此基础上, 再实现insert, extend 等操作\n\n```python\n                \n        #!/usr/bin/env python\n        # coding: utf-8\n        \n        \n        class Node(object):\n        \n            def __init__(self, value, next_node=None, pre_node=None):\n                self.value = value\n                self.index = 0\n                self.next_node = next_node\n                self.pre_node = pre_node\n        \n            def get_next_node(self):\n                return self.next_node\n        \n            def set_next_node(self, new_node):\n                self.next_node = new_node\n        \n            def get_pre_node(self):\n                return self.pre_node\n        \n            def set_pre_node(self, pre_node):\n                self.pre_node = pre_node\n        \n            def set_index(self, num):\n                self.index = num\n        \n            def __str__(self):\n                return str(self.value)\n        \n        \n        class MyList(object):\n        \n            def __init__(self):\n                self.start = Node\n                self.head = None\n                self.size = 0\n        \n            def _current_node(self):\n                if not self.head:\n                    current = None\n                else:\n                    current = self.head\n                    while current.get_next_node():\n                        current = current.get_next_node()\n                return current\n        \n            def init_head(self):\n                c = None\n                index = 0\n                if self.start:\n                    c = self.start\n                    c.index = 0\n                    while c.get_next_node():\n                        c = c.next_node\n                        index += 1\n                        c.index = index\n                return c\n        \n            def append(self, item):\n                node = Node(item)\n                node.set_index(self.size)\n                node.set_pre_node(self.head)\n                current = self._current_node()\n                if current:\n                    current.set_next_node(node)\n                else:\n                    self.start = node\n                self.head = node\n                self.size += 1\n                return 0\n        \n            def pop(self, index=None):\n                if index > self.size - 1 or index < 0:\n                    return None\n                elif index is None or index == self.size - 1:\n                    if not self.head:\n                        return None\n                    head = self.head\n                    self.head = head.get_pre_node()\n                    self.head.set_next_node(None)\n                    return head\n                else:\n                    if self.start:\n                        c = self.index(index)\n                        c_next = c.get_next_node()\n                        c_pre = c.get_pre_node()\n                        if c_pre:\n                            c_pre.set_next_node(c_next)\n                        if c_next:\n                            c_next.set_pre_node(c_pre)\n                        self.head = self.init_head()\n                        return c\n                    else:\n                        return None\n        \n            def index(self, num):\n                c = self.start\n                if c.index == num:\n                    return c\n                while c.get_next_node():\n                    c = c.next_node\n                    if c.index == num:\n                        break\n                return c\n        \n            @property\n            def length(self):\n                return self.size\n        \n            def __str__(self):\n                string = '['\n                if self.start:\n                    string += str(self.start.value)\n                    c = self.start\n                    while c.get_next_node():\n                        c = c.next_node\n                        string += ', ' + str(c.value)\n                string += ']'\n                return string\n        \n        \n        if __name__ == '__main__':\n            l = MyList()\n            l.append(9)\n            l.append(10)\n            l.append(90808098)\n            l.append('asdjkad')\n            l.append('ssss')\n            print l, l.length\n            print l.index(0)\n            print l.pop(0)\n```\n","slug":"mylist","published":1,"updated":"2017-06-05T11:04:47.452Z","photos":[],"link":"","_id":"cj3l060xs000anzy6q13ufn6s","content":"<h3 id=\"Python-list的简单实现\"><a href=\"#Python-list的简单实现\" class=\"headerlink\" title=\"Python list的简单实现\"></a>Python list的简单实现</h3><blockquote>\n<p>这里我主要实现了一下几个功能: append, pop, index, length写的比较乱<br>思路上大致就是</p>\n<ul>\n<li>设计每个节点的属性, 最简单的是每个几点只保存当前的值和指向下一个节点点指针, 我这里增加了当前节点的index, 以及指向前一个节点的指针</li>\n<li>设计链表的操作, append, pop, index, length</li>\n<li>可以在此基础上, 再实现insert, extend 等操作</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\">        </div><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value, next_node=None, pre_node=None)</span>:</span></div><div class=\"line\">        self.value = value</div><div class=\"line\">        self.index = <span class=\"number\">0</span></div><div class=\"line\">        self.next_node = next_node</div><div class=\"line\">        self.pre_node = pre_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_next_node</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.next_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_next_node</span><span class=\"params\">(self, new_node)</span>:</span></div><div class=\"line\">        self.next_node = new_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_pre_node</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.pre_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_pre_node</span><span class=\"params\">(self, pre_node)</span>:</span></div><div class=\"line\">        self.pre_node = pre_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_index</span><span class=\"params\">(self, num)</span>:</span></div><div class=\"line\">        self.index = num</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> str(self.value)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyList</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.start = Node</div><div class=\"line\">        self.head = <span class=\"keyword\">None</span></div><div class=\"line\">        self.size = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_current_node</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.head:</div><div class=\"line\">            current = <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            current = self.head</div><div class=\"line\">            <span class=\"keyword\">while</span> current.get_next_node():</div><div class=\"line\">                current = current.get_next_node()</div><div class=\"line\">        <span class=\"keyword\">return</span> current</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_head</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        c = <span class=\"keyword\">None</span></div><div class=\"line\">        index = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.start:</div><div class=\"line\">            c = self.start</div><div class=\"line\">            c.index = <span class=\"number\">0</span></div><div class=\"line\">            <span class=\"keyword\">while</span> c.get_next_node():</div><div class=\"line\">                c = c.next_node</div><div class=\"line\">                index += <span class=\"number\">1</span></div><div class=\"line\">                c.index = index</div><div class=\"line\">        <span class=\"keyword\">return</span> c</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">append</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        node = Node(item)</div><div class=\"line\">        node.set_index(self.size)</div><div class=\"line\">        node.set_pre_node(self.head)</div><div class=\"line\">        current = self._current_node()</div><div class=\"line\">        <span class=\"keyword\">if</span> current:</div><div class=\"line\">            current.set_next_node(node)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            self.start = node</div><div class=\"line\">        self.head = node</div><div class=\"line\">        self.size += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self, index=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> index &gt; self.size - <span class=\"number\">1</span> <span class=\"keyword\">or</span> index &lt; <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> index <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> index == self.size - <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.head:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">            head = self.head</div><div class=\"line\">            self.head = head.get_pre_node()</div><div class=\"line\">            self.head.set_next_node(<span class=\"keyword\">None</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> head</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> self.start:</div><div class=\"line\">                c = self.index(index)</div><div class=\"line\">                c_next = c.get_next_node()</div><div class=\"line\">                c_pre = c.get_pre_node()</div><div class=\"line\">                <span class=\"keyword\">if</span> c_pre:</div><div class=\"line\">                    c_pre.set_next_node(c_next)</div><div class=\"line\">                <span class=\"keyword\">if</span> c_next:</div><div class=\"line\">                    c_next.set_pre_node(c_pre)</div><div class=\"line\">                self.head = self.init_head()</div><div class=\"line\">                <span class=\"keyword\">return</span> c</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(self, num)</span>:</span></div><div class=\"line\">        c = self.start</div><div class=\"line\">        <span class=\"keyword\">if</span> c.index == num:</div><div class=\"line\">            <span class=\"keyword\">return</span> c</div><div class=\"line\">        <span class=\"keyword\">while</span> c.get_next_node():</div><div class=\"line\">            c = c.next_node</div><div class=\"line\">            <span class=\"keyword\">if</span> c.index == num:</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">return</span> c</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.size</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        string = <span class=\"string\">'['</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.start:</div><div class=\"line\">            string += str(self.start.value)</div><div class=\"line\">            c = self.start</div><div class=\"line\">            <span class=\"keyword\">while</span> c.get_next_node():</div><div class=\"line\">                c = c.next_node</div><div class=\"line\">                string += <span class=\"string\">', '</span> + str(c.value)</div><div class=\"line\">        string += <span class=\"string\">']'</span></div><div class=\"line\">        <span class=\"keyword\">return</span> string</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    l = MyList()</div><div class=\"line\">    l.append(<span class=\"number\">9</span>)</div><div class=\"line\">    l.append(<span class=\"number\">10</span>)</div><div class=\"line\">    l.append(<span class=\"number\">90808098</span>)</div><div class=\"line\">    l.append(<span class=\"string\">'asdjkad'</span>)</div><div class=\"line\">    l.append(<span class=\"string\">'ssss'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> l, l.length</div><div class=\"line\">    <span class=\"keyword\">print</span> l.index(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> l.pop(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Python-list的简单实现\"><a href=\"#Python-list的简单实现\" class=\"headerlink\" title=\"Python list的简单实现\"></a>Python list的简单实现</h3><blockquote>\n<p>这里我主要实现了一下几个功能: append, pop, index, length写的比较乱<br>思路上大致就是</p>\n<ul>\n<li>设计每个节点的属性, 最简单的是每个几点只保存当前的值和指向下一个节点点指针, 我这里增加了当前节点的index, 以及指向前一个节点的指针</li>\n<li>设计链表的操作, append, pop, index, length</li>\n<li>可以在此基础上, 再实现insert, extend 等操作</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\">        </div><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></div><div class=\"line\"><span class=\"comment\"># coding: utf-8</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value, next_node=None, pre_node=None)</span>:</span></div><div class=\"line\">        self.value = value</div><div class=\"line\">        self.index = <span class=\"number\">0</span></div><div class=\"line\">        self.next_node = next_node</div><div class=\"line\">        self.pre_node = pre_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_next_node</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.next_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_next_node</span><span class=\"params\">(self, new_node)</span>:</span></div><div class=\"line\">        self.next_node = new_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_pre_node</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.pre_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_pre_node</span><span class=\"params\">(self, pre_node)</span>:</span></div><div class=\"line\">        self.pre_node = pre_node</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_index</span><span class=\"params\">(self, num)</span>:</span></div><div class=\"line\">        self.index = num</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> str(self.value)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyList</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.start = Node</div><div class=\"line\">        self.head = <span class=\"keyword\">None</span></div><div class=\"line\">        self.size = <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_current_node</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.head:</div><div class=\"line\">            current = <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            current = self.head</div><div class=\"line\">            <span class=\"keyword\">while</span> current.get_next_node():</div><div class=\"line\">                current = current.get_next_node()</div><div class=\"line\">        <span class=\"keyword\">return</span> current</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_head</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        c = <span class=\"keyword\">None</span></div><div class=\"line\">        index = <span class=\"number\">0</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.start:</div><div class=\"line\">            c = self.start</div><div class=\"line\">            c.index = <span class=\"number\">0</span></div><div class=\"line\">            <span class=\"keyword\">while</span> c.get_next_node():</div><div class=\"line\">                c = c.next_node</div><div class=\"line\">                index += <span class=\"number\">1</span></div><div class=\"line\">                c.index = index</div><div class=\"line\">        <span class=\"keyword\">return</span> c</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">append</span><span class=\"params\">(self, item)</span>:</span></div><div class=\"line\">        node = Node(item)</div><div class=\"line\">        node.set_index(self.size)</div><div class=\"line\">        node.set_pre_node(self.head)</div><div class=\"line\">        current = self._current_node()</div><div class=\"line\">        <span class=\"keyword\">if</span> current:</div><div class=\"line\">            current.set_next_node(node)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            self.start = node</div><div class=\"line\">        self.head = node</div><div class=\"line\">        self.size += <span class=\"number\">1</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self, index=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">if</span> index &gt; self.size - <span class=\"number\">1</span> <span class=\"keyword\">or</span> index &lt; <span class=\"number\">0</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">        <span class=\"keyword\">elif</span> index <span class=\"keyword\">is</span> <span class=\"keyword\">None</span> <span class=\"keyword\">or</span> index == self.size - <span class=\"number\">1</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.head:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\">            head = self.head</div><div class=\"line\">            self.head = head.get_pre_node()</div><div class=\"line\">            self.head.set_next_node(<span class=\"keyword\">None</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> head</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            <span class=\"keyword\">if</span> self.start:</div><div class=\"line\">                c = self.index(index)</div><div class=\"line\">                c_next = c.get_next_node()</div><div class=\"line\">                c_pre = c.get_pre_node()</div><div class=\"line\">                <span class=\"keyword\">if</span> c_pre:</div><div class=\"line\">                    c_pre.set_next_node(c_next)</div><div class=\"line\">                <span class=\"keyword\">if</span> c_next:</div><div class=\"line\">                    c_next.set_pre_node(c_pre)</div><div class=\"line\">                self.head = self.init_head()</div><div class=\"line\">                <span class=\"keyword\">return</span> c</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">None</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(self, num)</span>:</span></div><div class=\"line\">        c = self.start</div><div class=\"line\">        <span class=\"keyword\">if</span> c.index == num:</div><div class=\"line\">            <span class=\"keyword\">return</span> c</div><div class=\"line\">        <span class=\"keyword\">while</span> c.get_next_node():</div><div class=\"line\">            c = c.next_node</div><div class=\"line\">            <span class=\"keyword\">if</span> c.index == num:</div><div class=\"line\">                <span class=\"keyword\">break</span></div><div class=\"line\">        <span class=\"keyword\">return</span> c</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @property</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">length</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.size</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        string = <span class=\"string\">'['</span></div><div class=\"line\">        <span class=\"keyword\">if</span> self.start:</div><div class=\"line\">            string += str(self.start.value)</div><div class=\"line\">            c = self.start</div><div class=\"line\">            <span class=\"keyword\">while</span> c.get_next_node():</div><div class=\"line\">                c = c.next_node</div><div class=\"line\">                string += <span class=\"string\">', '</span> + str(c.value)</div><div class=\"line\">        string += <span class=\"string\">']'</span></div><div class=\"line\">        <span class=\"keyword\">return</span> string</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    l = MyList()</div><div class=\"line\">    l.append(<span class=\"number\">9</span>)</div><div class=\"line\">    l.append(<span class=\"number\">10</span>)</div><div class=\"line\">    l.append(<span class=\"number\">90808098</span>)</div><div class=\"line\">    l.append(<span class=\"string\">'asdjkad'</span>)</div><div class=\"line\">    l.append(<span class=\"string\">'ssss'</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> l, l.length</div><div class=\"line\">    <span class=\"keyword\">print</span> l.index(<span class=\"number\">0</span>)</div><div class=\"line\">    <span class=\"keyword\">print</span> l.pop(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure>\n"},{"layout":"four","title":"Mysql使用心得","date":"2016-11-22T15:16:05.000Z","comments":1,"_content":"# MYSQL\nMySql是一个快速、多线程、多用户的SQL数据库服务器。几乎是免费的，支持正规的SQL查询语言和采用多种数据类型，能对数据进行各种详细的查询等。\n\n![](https://martin-upload.b0.upaiyun.com/web/2016/11/3cdb883804bf06eb6c5326317d2fbc60.png)\n\n## Relational Database Management System\n\n#### DDL（Data Definition Language）\nCREATE、ALTER与DROP\n\n#### DML（Data Manipulation Language）\n插，删，改，排，检\nINSERT、DELETE、JOIN、SORT、SELECT\n\n> #### 注意\n> 1.between and 的边界\n2.通配符：%和_\n3.limit + offset\n4.inner join 和 left join\n5.union 和 union all\n\n\n# REDIS\n\n\n# MONGO\n\n\n# SQLALCHEMY\n![](https://martin-upload.b0.upaiyun.com/web/2016/11/2bc29ffdc76fd28affe82473665cce4c.png)\n* <font color=red>SQLAlchemy无法修改表结构，如果需要可以使用SQLAlchemy开发者开源的另外一个软件Alembic来完成</font>\n\n#### 1.create_engine\nA.\nstrategy.create的调用，而 strategy 就是 engine 的实现细节. strategy 可以在 create_engine 调用时通过 strategy 参数指定, 目前官方的支持有三种：\n* plain, 默认的\n* threadlocal, 连接是线程局部的\n* mock, 所有的 SQL 语句的执行会使用指定的函数\n\nB.\n```\n- pool_size 连接数\n- max_overflow 最多多几个连接\n- pool_recycle 连接重置周期\n- pool_timeout 连接超时时间\n```\n```\nfrom sqlalchemy import create_engine\n\n\ndef f(sql,*args,**kargs):\n    print sql, args, kargs\n\ns= 'mysql://user:password@host:port/database?charset=utf-8'\nengine = create_engine(s, strategy='mock', executor=f, echo=False, pool_size=10, max_overflow=5, pool_recycle=3600, pool_timeout=30)\nprint engine.execute('select id from \"user\"')\n```\n\n#### 2. table\nSQLAlchemy的Delarative\nA.\nSQLAlchemy使用 Classic和Modern两种模式 来描述一个表。\n\nClassic\n```\nfrom sqlalchemy import Column, Integer, MetaData, String, Table\nfrom sqlalchemy.orm import mapper\n\nmetadata = MetaData()\n\nuser = Table('users', metadata,\n            Column('id', Integer, primary_key=True),\n            Column('name', String(50)),\n            Column('fullname', String(50)),\n            Column('password', String(12))\n        )\n\n\nclass User(object):\n    def __init__(self, name, fullname, password):\n        self.name = name\n        self.fullname = fullname\n        self.password = password\n\nmapper(User, user)\n```\nModern\n```\nfrom sqlalchemy import Column, Integer, MetaData, String\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\n\nclass User(Base):\n    __tablename__ = 'user'\n    id = Column(Integer, primary_key=True)\n    name =  Column(String(50))\n    fullname = Column(String(50))\n    password = Column(String(12))\n\n    def __init__(self, name, fullname, password):\n        self.name = name\n        self.fullname = fullname\n        self.password = password\n\n    def __repr__(self):\n        return \"<User('%s','%s', '%s')>\" % (self.name, self.fullname, self.password)\nuser = User()\n```\nORM会为所有被映射的表列创建类属性，这些属性是通过Python语言中[python描述符](http://www.geekfan.net/7862/)机制来实现的。\nSQLAlchemy 的连接创建是 Lazy 的方式。要对对象实行持久化(Persist) (所谓的持久化就是把对象数据按照映射关系存储入数据库里)\n\n#### 3.session\nORM的操作句柄(Handle)被称为会话(Session)。\n\n```\nfrom contextlib import closing\n\nfrom sqlalchemy.orm import sessionmaker\n\nSession = sessionmaker()\nSession.configure(bind=engine, autocommit=False, expire_on_commit=True)\nwith closing(Session()) as session:\n    user = User()\n    user.name = 'test'\n    session.add(user)\n    session.commit()\n```","source":"_posts/mysql.md","raw":"layout: four\ntitle: Mysql使用心得\ndate: 2016-11-22 23:16:05\ntags: 重点\ncomments: true\ncategories: Mysql\n\n---\n# MYSQL\nMySql是一个快速、多线程、多用户的SQL数据库服务器。几乎是免费的，支持正规的SQL查询语言和采用多种数据类型，能对数据进行各种详细的查询等。\n\n![](https://martin-upload.b0.upaiyun.com/web/2016/11/3cdb883804bf06eb6c5326317d2fbc60.png)\n\n## Relational Database Management System\n\n#### DDL（Data Definition Language）\nCREATE、ALTER与DROP\n\n#### DML（Data Manipulation Language）\n插，删，改，排，检\nINSERT、DELETE、JOIN、SORT、SELECT\n\n> #### 注意\n> 1.between and 的边界\n2.通配符：%和_\n3.limit + offset\n4.inner join 和 left join\n5.union 和 union all\n\n\n# REDIS\n\n\n# MONGO\n\n\n# SQLALCHEMY\n![](https://martin-upload.b0.upaiyun.com/web/2016/11/2bc29ffdc76fd28affe82473665cce4c.png)\n* <font color=red>SQLAlchemy无法修改表结构，如果需要可以使用SQLAlchemy开发者开源的另外一个软件Alembic来完成</font>\n\n#### 1.create_engine\nA.\nstrategy.create的调用，而 strategy 就是 engine 的实现细节. strategy 可以在 create_engine 调用时通过 strategy 参数指定, 目前官方的支持有三种：\n* plain, 默认的\n* threadlocal, 连接是线程局部的\n* mock, 所有的 SQL 语句的执行会使用指定的函数\n\nB.\n```\n- pool_size 连接数\n- max_overflow 最多多几个连接\n- pool_recycle 连接重置周期\n- pool_timeout 连接超时时间\n```\n```\nfrom sqlalchemy import create_engine\n\n\ndef f(sql,*args,**kargs):\n    print sql, args, kargs\n\ns= 'mysql://user:password@host:port/database?charset=utf-8'\nengine = create_engine(s, strategy='mock', executor=f, echo=False, pool_size=10, max_overflow=5, pool_recycle=3600, pool_timeout=30)\nprint engine.execute('select id from \"user\"')\n```\n\n#### 2. table\nSQLAlchemy的Delarative\nA.\nSQLAlchemy使用 Classic和Modern两种模式 来描述一个表。\n\nClassic\n```\nfrom sqlalchemy import Column, Integer, MetaData, String, Table\nfrom sqlalchemy.orm import mapper\n\nmetadata = MetaData()\n\nuser = Table('users', metadata,\n            Column('id', Integer, primary_key=True),\n            Column('name', String(50)),\n            Column('fullname', String(50)),\n            Column('password', String(12))\n        )\n\n\nclass User(object):\n    def __init__(self, name, fullname, password):\n        self.name = name\n        self.fullname = fullname\n        self.password = password\n\nmapper(User, user)\n```\nModern\n```\nfrom sqlalchemy import Column, Integer, MetaData, String\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\n\nclass User(Base):\n    __tablename__ = 'user'\n    id = Column(Integer, primary_key=True)\n    name =  Column(String(50))\n    fullname = Column(String(50))\n    password = Column(String(12))\n\n    def __init__(self, name, fullname, password):\n        self.name = name\n        self.fullname = fullname\n        self.password = password\n\n    def __repr__(self):\n        return \"<User('%s','%s', '%s')>\" % (self.name, self.fullname, self.password)\nuser = User()\n```\nORM会为所有被映射的表列创建类属性，这些属性是通过Python语言中[python描述符](http://www.geekfan.net/7862/)机制来实现的。\nSQLAlchemy 的连接创建是 Lazy 的方式。要对对象实行持久化(Persist) (所谓的持久化就是把对象数据按照映射关系存储入数据库里)\n\n#### 3.session\nORM的操作句柄(Handle)被称为会话(Session)。\n\n```\nfrom contextlib import closing\n\nfrom sqlalchemy.orm import sessionmaker\n\nSession = sessionmaker()\nSession.configure(bind=engine, autocommit=False, expire_on_commit=True)\nwith closing(Session()) as session:\n    user = User()\n    user.name = 'test'\n    session.add(user)\n    session.commit()\n```","slug":"mysql","published":1,"updated":"2017-06-05T11:04:47.452Z","photos":[],"link":"","_id":"cj3l060xx000enzy6q837a2h6","content":"<h1 id=\"MYSQL\"><a href=\"#MYSQL\" class=\"headerlink\" title=\"MYSQL\"></a>MYSQL</h1><p>MySql是一个快速、多线程、多用户的SQL数据库服务器。几乎是免费的，支持正规的SQL查询语言和采用多种数据类型，能对数据进行各种详细的查询等。</p>\n<p><img src=\"https://martin-upload.b0.upaiyun.com/web/2016/11/3cdb883804bf06eb6c5326317d2fbc60.png\" alt=\"\"></p>\n<h2 id=\"Relational-Database-Management-System\"><a href=\"#Relational-Database-Management-System\" class=\"headerlink\" title=\"Relational Database Management System\"></a>Relational Database Management System</h2><h4 id=\"DDL（Data-Definition-Language）\"><a href=\"#DDL（Data-Definition-Language）\" class=\"headerlink\" title=\"DDL（Data Definition Language）\"></a>DDL（Data Definition Language）</h4><p>CREATE、ALTER与DROP</p>\n<h4 id=\"DML（Data-Manipulation-Language）\"><a href=\"#DML（Data-Manipulation-Language）\" class=\"headerlink\" title=\"DML（Data Manipulation Language）\"></a>DML（Data Manipulation Language）</h4><p>插，删，改，排，检<br>INSERT、DELETE、JOIN、SORT、SELECT</p>\n<blockquote>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>1.between and 的边界<br>2.通配符：%和_<br>3.limit + offset<br>4.inner join 和 left join<br>5.union 和 union all</p>\n</blockquote>\n<h1 id=\"REDIS\"><a href=\"#REDIS\" class=\"headerlink\" title=\"REDIS\"></a>REDIS</h1><h1 id=\"MONGO\"><a href=\"#MONGO\" class=\"headerlink\" title=\"MONGO\"></a>MONGO</h1><h1 id=\"SQLALCHEMY\"><a href=\"#SQLALCHEMY\" class=\"headerlink\" title=\"SQLALCHEMY\"></a>SQLALCHEMY</h1><p><img src=\"https://martin-upload.b0.upaiyun.com/web/2016/11/2bc29ffdc76fd28affe82473665cce4c.png\" alt=\"\"></p>\n<ul>\n<li><font color=\"red\">SQLAlchemy无法修改表结构，如果需要可以使用SQLAlchemy开发者开源的另外一个软件Alembic来完成</font>\n\n</li>\n</ul>\n<h4 id=\"1-create-engine\"><a href=\"#1-create-engine\" class=\"headerlink\" title=\"1.create_engine\"></a>1.create_engine</h4><p>A.<br>strategy.create的调用，而 strategy 就是 engine 的实现细节. strategy 可以在 create_engine 调用时通过 strategy 参数指定, 目前官方的支持有三种：</p>\n<ul>\n<li>plain, 默认的</li>\n<li>threadlocal, 连接是线程局部的</li>\n<li>mock, 所有的 SQL 语句的执行会使用指定的函数</li>\n</ul>\n<p>B.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- pool_size 连接数</div><div class=\"line\">- max_overflow 最多多几个连接</div><div class=\"line\">- pool_recycle 连接重置周期</div><div class=\"line\">- pool_timeout 连接超时时间</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">from sqlalchemy import create_engine</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def f(sql,*args,**kargs):</div><div class=\"line\">    print sql, args, kargs</div><div class=\"line\"></div><div class=\"line\">s= &apos;mysql://user:password@host:port/database?charset=utf-8&apos;</div><div class=\"line\">engine = create_engine(s, strategy=&apos;mock&apos;, executor=f, echo=False, pool_size=10, max_overflow=5, pool_recycle=3600, pool_timeout=30)</div><div class=\"line\">print engine.execute(&apos;select id from &quot;user&quot;&apos;)</div></pre></td></tr></table></figure>\n<h4 id=\"2-table\"><a href=\"#2-table\" class=\"headerlink\" title=\"2. table\"></a>2. table</h4><p>SQLAlchemy的Delarative<br>A.<br>SQLAlchemy使用 Classic和Modern两种模式 来描述一个表。</p>\n<p>Classic<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">from sqlalchemy import Column, Integer, MetaData, String, Table</div><div class=\"line\">from sqlalchemy.orm import mapper</div><div class=\"line\"></div><div class=\"line\">metadata = MetaData()</div><div class=\"line\"></div><div class=\"line\">user = Table(&apos;users&apos;, metadata,</div><div class=\"line\">            Column(&apos;id&apos;, Integer, primary_key=True),</div><div class=\"line\">            Column(&apos;name&apos;, String(50)),</div><div class=\"line\">            Column(&apos;fullname&apos;, String(50)),</div><div class=\"line\">            Column(&apos;password&apos;, String(12))</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class User(object):</div><div class=\"line\">    def __init__(self, name, fullname, password):</div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.fullname = fullname</div><div class=\"line\">        self.password = password</div><div class=\"line\"></div><div class=\"line\">mapper(User, user)</div></pre></td></tr></table></figure></p>\n<p>Modern<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">from sqlalchemy import Column, Integer, MetaData, String</div><div class=\"line\">from sqlalchemy.ext.declarative import declarative_base</div><div class=\"line\"></div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class User(Base):</div><div class=\"line\">    __tablename__ = &apos;user&apos;</div><div class=\"line\">    id = Column(Integer, primary_key=True)</div><div class=\"line\">    name =  Column(String(50))</div><div class=\"line\">    fullname = Column(String(50))</div><div class=\"line\">    password = Column(String(12))</div><div class=\"line\"></div><div class=\"line\">    def __init__(self, name, fullname, password):</div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.fullname = fullname</div><div class=\"line\">        self.password = password</div><div class=\"line\"></div><div class=\"line\">    def __repr__(self):</div><div class=\"line\">        return &quot;&lt;User(&apos;%s&apos;,&apos;%s&apos;, &apos;%s&apos;)&gt;&quot; % (self.name, self.fullname, self.password)</div><div class=\"line\">user = User()</div></pre></td></tr></table></figure></p>\n<p>ORM会为所有被映射的表列创建类属性，这些属性是通过Python语言中<a href=\"http://www.geekfan.net/7862/\" target=\"_blank\" rel=\"external\">python描述符</a>机制来实现的。<br>SQLAlchemy 的连接创建是 Lazy 的方式。要对对象实行持久化(Persist) (所谓的持久化就是把对象数据按照映射关系存储入数据库里)</p>\n<h4 id=\"3-session\"><a href=\"#3-session\" class=\"headerlink\" title=\"3.session\"></a>3.session</h4><p>ORM的操作句柄(Handle)被称为会话(Session)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from contextlib import closing</div><div class=\"line\"></div><div class=\"line\">from sqlalchemy.orm import sessionmaker</div><div class=\"line\"></div><div class=\"line\">Session = sessionmaker()</div><div class=\"line\">Session.configure(bind=engine, autocommit=False, expire_on_commit=True)</div><div class=\"line\">with closing(Session()) as session:</div><div class=\"line\">    user = User()</div><div class=\"line\">    user.name = &apos;test&apos;</div><div class=\"line\">    session.add(user)</div><div class=\"line\">    session.commit()</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MYSQL\"><a href=\"#MYSQL\" class=\"headerlink\" title=\"MYSQL\"></a>MYSQL</h1><p>MySql是一个快速、多线程、多用户的SQL数据库服务器。几乎是免费的，支持正规的SQL查询语言和采用多种数据类型，能对数据进行各种详细的查询等。</p>\n<p><img src=\"https://martin-upload.b0.upaiyun.com/web/2016/11/3cdb883804bf06eb6c5326317d2fbc60.png\" alt=\"\"></p>\n<h2 id=\"Relational-Database-Management-System\"><a href=\"#Relational-Database-Management-System\" class=\"headerlink\" title=\"Relational Database Management System\"></a>Relational Database Management System</h2><h4 id=\"DDL（Data-Definition-Language）\"><a href=\"#DDL（Data-Definition-Language）\" class=\"headerlink\" title=\"DDL（Data Definition Language）\"></a>DDL（Data Definition Language）</h4><p>CREATE、ALTER与DROP</p>\n<h4 id=\"DML（Data-Manipulation-Language）\"><a href=\"#DML（Data-Manipulation-Language）\" class=\"headerlink\" title=\"DML（Data Manipulation Language）\"></a>DML（Data Manipulation Language）</h4><p>插，删，改，排，检<br>INSERT、DELETE、JOIN、SORT、SELECT</p>\n<blockquote>\n<h4 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h4><p>1.between and 的边界<br>2.通配符：%和_<br>3.limit + offset<br>4.inner join 和 left join<br>5.union 和 union all</p>\n</blockquote>\n<h1 id=\"REDIS\"><a href=\"#REDIS\" class=\"headerlink\" title=\"REDIS\"></a>REDIS</h1><h1 id=\"MONGO\"><a href=\"#MONGO\" class=\"headerlink\" title=\"MONGO\"></a>MONGO</h1><h1 id=\"SQLALCHEMY\"><a href=\"#SQLALCHEMY\" class=\"headerlink\" title=\"SQLALCHEMY\"></a>SQLALCHEMY</h1><p><img src=\"https://martin-upload.b0.upaiyun.com/web/2016/11/2bc29ffdc76fd28affe82473665cce4c.png\" alt=\"\"></p>\n<ul>\n<li><font color=\"red\">SQLAlchemy无法修改表结构，如果需要可以使用SQLAlchemy开发者开源的另外一个软件Alembic来完成</font>\n\n</li>\n</ul>\n<h4 id=\"1-create-engine\"><a href=\"#1-create-engine\" class=\"headerlink\" title=\"1.create_engine\"></a>1.create_engine</h4><p>A.<br>strategy.create的调用，而 strategy 就是 engine 的实现细节. strategy 可以在 create_engine 调用时通过 strategy 参数指定, 目前官方的支持有三种：</p>\n<ul>\n<li>plain, 默认的</li>\n<li>threadlocal, 连接是线程局部的</li>\n<li>mock, 所有的 SQL 语句的执行会使用指定的函数</li>\n</ul>\n<p>B.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- pool_size 连接数</div><div class=\"line\">- max_overflow 最多多几个连接</div><div class=\"line\">- pool_recycle 连接重置周期</div><div class=\"line\">- pool_timeout 连接超时时间</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">from sqlalchemy import create_engine</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">def f(sql,*args,**kargs):</div><div class=\"line\">    print sql, args, kargs</div><div class=\"line\"></div><div class=\"line\">s= &apos;mysql://user:password@host:port/database?charset=utf-8&apos;</div><div class=\"line\">engine = create_engine(s, strategy=&apos;mock&apos;, executor=f, echo=False, pool_size=10, max_overflow=5, pool_recycle=3600, pool_timeout=30)</div><div class=\"line\">print engine.execute(&apos;select id from &quot;user&quot;&apos;)</div></pre></td></tr></table></figure>\n<h4 id=\"2-table\"><a href=\"#2-table\" class=\"headerlink\" title=\"2. table\"></a>2. table</h4><p>SQLAlchemy的Delarative<br>A.<br>SQLAlchemy使用 Classic和Modern两种模式 来描述一个表。</p>\n<p>Classic<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">from sqlalchemy import Column, Integer, MetaData, String, Table</div><div class=\"line\">from sqlalchemy.orm import mapper</div><div class=\"line\"></div><div class=\"line\">metadata = MetaData()</div><div class=\"line\"></div><div class=\"line\">user = Table(&apos;users&apos;, metadata,</div><div class=\"line\">            Column(&apos;id&apos;, Integer, primary_key=True),</div><div class=\"line\">            Column(&apos;name&apos;, String(50)),</div><div class=\"line\">            Column(&apos;fullname&apos;, String(50)),</div><div class=\"line\">            Column(&apos;password&apos;, String(12))</div><div class=\"line\">        )</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class User(object):</div><div class=\"line\">    def __init__(self, name, fullname, password):</div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.fullname = fullname</div><div class=\"line\">        self.password = password</div><div class=\"line\"></div><div class=\"line\">mapper(User, user)</div></pre></td></tr></table></figure></p>\n<p>Modern<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">from sqlalchemy import Column, Integer, MetaData, String</div><div class=\"line\">from sqlalchemy.ext.declarative import declarative_base</div><div class=\"line\"></div><div class=\"line\">Base = declarative_base()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">class User(Base):</div><div class=\"line\">    __tablename__ = &apos;user&apos;</div><div class=\"line\">    id = Column(Integer, primary_key=True)</div><div class=\"line\">    name =  Column(String(50))</div><div class=\"line\">    fullname = Column(String(50))</div><div class=\"line\">    password = Column(String(12))</div><div class=\"line\"></div><div class=\"line\">    def __init__(self, name, fullname, password):</div><div class=\"line\">        self.name = name</div><div class=\"line\">        self.fullname = fullname</div><div class=\"line\">        self.password = password</div><div class=\"line\"></div><div class=\"line\">    def __repr__(self):</div><div class=\"line\">        return &quot;&lt;User(&apos;%s&apos;,&apos;%s&apos;, &apos;%s&apos;)&gt;&quot; % (self.name, self.fullname, self.password)</div><div class=\"line\">user = User()</div></pre></td></tr></table></figure></p>\n<p>ORM会为所有被映射的表列创建类属性，这些属性是通过Python语言中<a href=\"http://www.geekfan.net/7862/\" target=\"_blank\" rel=\"external\">python描述符</a>机制来实现的。<br>SQLAlchemy 的连接创建是 Lazy 的方式。要对对象实行持久化(Persist) (所谓的持久化就是把对象数据按照映射关系存储入数据库里)</p>\n<h4 id=\"3-session\"><a href=\"#3-session\" class=\"headerlink\" title=\"3.session\"></a>3.session</h4><p>ORM的操作句柄(Handle)被称为会话(Session)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">from contextlib import closing</div><div class=\"line\"></div><div class=\"line\">from sqlalchemy.orm import sessionmaker</div><div class=\"line\"></div><div class=\"line\">Session = sessionmaker()</div><div class=\"line\">Session.configure(bind=engine, autocommit=False, expire_on_commit=True)</div><div class=\"line\">with closing(Session()) as session:</div><div class=\"line\">    user = User()</div><div class=\"line\">    user.name = &apos;test&apos;</div><div class=\"line\">    session.add(user)</div><div class=\"line\">    session.commit()</div></pre></td></tr></table></figure>"},{"layout":"three","title":"Python使用PIL破解验证码","date":"2016-11-17T16:12:05.000Z","comments":1,"_content":"## 破解验证码DEMO\n本文原项目地址为[破解验证码](https://github.com/kouyalong/captcha_crack)，刷新请求不同的验证码，后台破解验证码同时把结果返回。\n\n* 主要破解代码段\n```\ndef break_image(image):\n    \"\"\"\n    先把图片根据字符和空白RGB值，把图片转换成model=1的灰度模式\n    然后根据灰度模式，黑的为0， 白的为1，把图片转换成0，1字符串\n    \"\"\"\n    image = image.convert(\"RGB\")\n    image2_dict = {}\n    word_count = 4     # 观察验证码字符个数\n    start = 4       # 观察图片验证码开始的位置\n    one_word_length = 12        # 观察图片验证码每个字符是多少长度\n    i = 0\n    while i < word_count:\n        image2 = Image.new(\"1\", (one_word_length, image.size[1]), 255)\n        for x in range(start, start + one_word_length):\n            for y in range(image.size[1]):\n                pix = image.getpixel((x, y))\n                if pix[1] < 255:    # 根据图片验证码上面字符的颜色筛选\n                    image2.putpixel((x - start, y), 0)\n        image2_dict[i] = image2\n        start += one_word_length\n        i += 1\n\n    tem_dict = {}\n    for key in image2_dict.keys():\n        tem_list = []\n        for x in range(image2_dict.get(key).size[0]):\n            tem_str = ''\n            for y in range(image2_dict.get(key).size[1]):\n                pix = image2_dict.get(key).getpixel((x, y))\n                if pix != 0:\n                    pix = 1\n                else:\n                    pix = 0\n                tem_str += str(pix)\n            tem_list.append(tem_str + \"\\n\")\n        tem_dict[key] = tem_list\n    return tem_dict, image.size[1]\n```","source":"_posts/python_image.md","raw":"layout: three\ntitle: Python使用PIL破解验证码\ndate: 2016-11-18 00:12:05\ntags: 重点\ncomments: true\ncategories: Python\n\n---\n## 破解验证码DEMO\n本文原项目地址为[破解验证码](https://github.com/kouyalong/captcha_crack)，刷新请求不同的验证码，后台破解验证码同时把结果返回。\n\n* 主要破解代码段\n```\ndef break_image(image):\n    \"\"\"\n    先把图片根据字符和空白RGB值，把图片转换成model=1的灰度模式\n    然后根据灰度模式，黑的为0， 白的为1，把图片转换成0，1字符串\n    \"\"\"\n    image = image.convert(\"RGB\")\n    image2_dict = {}\n    word_count = 4     # 观察验证码字符个数\n    start = 4       # 观察图片验证码开始的位置\n    one_word_length = 12        # 观察图片验证码每个字符是多少长度\n    i = 0\n    while i < word_count:\n        image2 = Image.new(\"1\", (one_word_length, image.size[1]), 255)\n        for x in range(start, start + one_word_length):\n            for y in range(image.size[1]):\n                pix = image.getpixel((x, y))\n                if pix[1] < 255:    # 根据图片验证码上面字符的颜色筛选\n                    image2.putpixel((x - start, y), 0)\n        image2_dict[i] = image2\n        start += one_word_length\n        i += 1\n\n    tem_dict = {}\n    for key in image2_dict.keys():\n        tem_list = []\n        for x in range(image2_dict.get(key).size[0]):\n            tem_str = ''\n            for y in range(image2_dict.get(key).size[1]):\n                pix = image2_dict.get(key).getpixel((x, y))\n                if pix != 0:\n                    pix = 1\n                else:\n                    pix = 0\n                tem_str += str(pix)\n            tem_list.append(tem_str + \"\\n\")\n        tem_dict[key] = tem_list\n    return tem_dict, image.size[1]\n```","slug":"python_image","published":1,"updated":"2017-06-05T11:04:47.452Z","photos":[],"link":"","_id":"cj3l060xz000hnzy6eisxvfwh","content":"<h2 id=\"破解验证码DEMO\"><a href=\"#破解验证码DEMO\" class=\"headerlink\" title=\"破解验证码DEMO\"></a>破解验证码DEMO</h2><p>本文原项目地址为<a href=\"https://github.com/kouyalong/captcha_crack\" target=\"_blank\" rel=\"external\">破解验证码</a>，刷新请求不同的验证码，后台破解验证码同时把结果返回。</p>\n<ul>\n<li>主要破解代码段<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">def break_image(image):</div><div class=\"line\">    &quot;&quot;&quot;</div><div class=\"line\">    先把图片根据字符和空白RGB值，把图片转换成model=1的灰度模式</div><div class=\"line\">    然后根据灰度模式，黑的为0， 白的为1，把图片转换成0，1字符串</div><div class=\"line\">    &quot;&quot;&quot;</div><div class=\"line\">    image = image.convert(&quot;RGB&quot;)</div><div class=\"line\">    image2_dict = &#123;&#125;</div><div class=\"line\">    word_count = 4     # 观察验证码字符个数</div><div class=\"line\">    start = 4       # 观察图片验证码开始的位置</div><div class=\"line\">    one_word_length = 12        # 观察图片验证码每个字符是多少长度</div><div class=\"line\">    i = 0</div><div class=\"line\">    while i &lt; word_count:</div><div class=\"line\">        image2 = Image.new(&quot;1&quot;, (one_word_length, image.size[1]), 255)</div><div class=\"line\">        for x in range(start, start + one_word_length):</div><div class=\"line\">            for y in range(image.size[1]):</div><div class=\"line\">                pix = image.getpixel((x, y))</div><div class=\"line\">                if pix[1] &lt; 255:    # 根据图片验证码上面字符的颜色筛选</div><div class=\"line\">                    image2.putpixel((x - start, y), 0)</div><div class=\"line\">        image2_dict[i] = image2</div><div class=\"line\">        start += one_word_length</div><div class=\"line\">        i += 1</div><div class=\"line\"></div><div class=\"line\">    tem_dict = &#123;&#125;</div><div class=\"line\">    for key in image2_dict.keys():</div><div class=\"line\">        tem_list = []</div><div class=\"line\">        for x in range(image2_dict.get(key).size[0]):</div><div class=\"line\">            tem_str = &apos;&apos;</div><div class=\"line\">            for y in range(image2_dict.get(key).size[1]):</div><div class=\"line\">                pix = image2_dict.get(key).getpixel((x, y))</div><div class=\"line\">                if pix != 0:</div><div class=\"line\">                    pix = 1</div><div class=\"line\">                else:</div><div class=\"line\">                    pix = 0</div><div class=\"line\">                tem_str += str(pix)</div><div class=\"line\">            tem_list.append(tem_str + &quot;\\n&quot;)</div><div class=\"line\">        tem_dict[key] = tem_list</div><div class=\"line\">    return tem_dict, image.size[1]</div></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"破解验证码DEMO\"><a href=\"#破解验证码DEMO\" class=\"headerlink\" title=\"破解验证码DEMO\"></a>破解验证码DEMO</h2><p>本文原项目地址为<a href=\"https://github.com/kouyalong/captcha_crack\" target=\"_blank\" rel=\"external\">破解验证码</a>，刷新请求不同的验证码，后台破解验证码同时把结果返回。</p>\n<ul>\n<li>主要破解代码段<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">def break_image(image):</div><div class=\"line\">    &quot;&quot;&quot;</div><div class=\"line\">    先把图片根据字符和空白RGB值，把图片转换成model=1的灰度模式</div><div class=\"line\">    然后根据灰度模式，黑的为0， 白的为1，把图片转换成0，1字符串</div><div class=\"line\">    &quot;&quot;&quot;</div><div class=\"line\">    image = image.convert(&quot;RGB&quot;)</div><div class=\"line\">    image2_dict = &#123;&#125;</div><div class=\"line\">    word_count = 4     # 观察验证码字符个数</div><div class=\"line\">    start = 4       # 观察图片验证码开始的位置</div><div class=\"line\">    one_word_length = 12        # 观察图片验证码每个字符是多少长度</div><div class=\"line\">    i = 0</div><div class=\"line\">    while i &lt; word_count:</div><div class=\"line\">        image2 = Image.new(&quot;1&quot;, (one_word_length, image.size[1]), 255)</div><div class=\"line\">        for x in range(start, start + one_word_length):</div><div class=\"line\">            for y in range(image.size[1]):</div><div class=\"line\">                pix = image.getpixel((x, y))</div><div class=\"line\">                if pix[1] &lt; 255:    # 根据图片验证码上面字符的颜色筛选</div><div class=\"line\">                    image2.putpixel((x - start, y), 0)</div><div class=\"line\">        image2_dict[i] = image2</div><div class=\"line\">        start += one_word_length</div><div class=\"line\">        i += 1</div><div class=\"line\"></div><div class=\"line\">    tem_dict = &#123;&#125;</div><div class=\"line\">    for key in image2_dict.keys():</div><div class=\"line\">        tem_list = []</div><div class=\"line\">        for x in range(image2_dict.get(key).size[0]):</div><div class=\"line\">            tem_str = &apos;&apos;</div><div class=\"line\">            for y in range(image2_dict.get(key).size[1]):</div><div class=\"line\">                pix = image2_dict.get(key).getpixel((x, y))</div><div class=\"line\">                if pix != 0:</div><div class=\"line\">                    pix = 1</div><div class=\"line\">                else:</div><div class=\"line\">                    pix = 0</div><div class=\"line\">                tem_str += str(pix)</div><div class=\"line\">            tem_list.append(tem_str + &quot;\\n&quot;)</div><div class=\"line\">        tem_dict[key] = tem_list</div><div class=\"line\">    return tem_dict, image.size[1]</div></pre></td></tr></table></figure></li>\n</ul>\n"},{"layout":"sort_layout","title":"Python 实现八大排序","date":"2017-05-24T10:16:05.000Z","comments":1,"_content":"### 排序算法\n\n* 各种排序算法\n![](https://martin-upload.b0.upaiyun.com/web/2017/05/4097d5d86145141fcb6a5ecff0fbc3bc.jpg)\n\n* 各种排序算法比较\n![](https://martin-upload.b0.upaiyun.com/web/2017/05/746fe11d81c35fc57bb2b8ba17be65c5.jpg)\n\n##### 冒泡排序\n\n* 基本思想:\n\n    > 在要排序的一组数中, 对当前还未排好序的范围内的全部数, 自上而下对相邻的两个数依次进行比较和调整, 让较大的数往下沉, 较小的往上冒.\n    > 即:每当两相邻的数比较后发现它们的排序与排序要求相反时, 就将它们互换.\n\n* 算法实现:\n\n```python\ndef bubble_sort(seq):\n    for i, item_i in enumerate(seq):\n        for j, item_j in enumerate(seq):\n            if item_j > item_i:\n                seq[i], seq[j] = seq[j], seq[i]\n    return seq\n\nprint bubble_sort([3, 6, 3, 44, 55, 11])\n```\n\n##### 快速排序\n\n* 基本思想:\n\n    > 通过一趟排序将要排序的数据分割成独立的两部分, 其中一部分的所有数据都比另外一部分的所有数据都要小, \n    > 然后再按此方法对这两部分数据分别进行快速排序, 整个排序过程可以递归进行，以此达到整个数据变成有序序列.\n\n* 算法实现:\n\n```python\ndef quick_sort(seq, start_i, end_j):\n    start = start_i\n    end = end_j\n    if start >= end:\n        return seq\n    start_item = seq[start]\n    while start < end:\n        while start < end and seq[end] >= start_item:\n            end -= 1\n        seq[start] = seq[end]\n        while start < end and seq[start] <= start_item:\n            start += 1\n        seq[end] = seq[start]\n    seq[start] = start_item\n    quick_sort(seq, start_i, start - 1)\n    quick_sort(seq, end + 1, end_j)\n    return seq\n\nprint quick_sort([3, 6, 3, 44, 55, 11], 0, 5)\n```\n\n##### 简单选择排序\n\n* 基本思想: \n    > 选择排序也是一种简单直观的排序算法.它的工作原理很容易理解:首先在未排序序列中找到最小（大）元素, 存放到排序序列的起始位置;\n    > 然后,再从剩余未排序元素中继续寻找最小（大）元素, 放到已排序序列的末尾. 以此类推，直到所有元素均排序完毕.\n\n* 算法实现:\n\n```python\ndef select_sort(seq):\n    for i in xrange(len(seq)):\n        min_item = seq[i]\n        min_j = i\n        for j, item in enumerate(seq[i:]):\n            if item <= min_item:\n                min_item = item\n                min_j = j\n        if min_j + i != i:\n            seq[min_j + i], seq[i] = seq[i], seq[min_j + i]\n    return seq\n\nprint select_sort([3, 6, 3, 44, 55, 11])\n```\n\n\n##### 直接插入排序\n\n* 基本思想:\n    > 从第一个元素开始, 该元素可以认为已经被排序\n    > 取出下一个元素, 在已经排序的元素序列中从后向前扫描, 找到已排序的元素小于或者等于新元素的位置, 将新元素插入到该位置后\n    > 重复以上步骤, 直到排序完成\n\n* 算法实现:\n\n```python\ndef insert_sort(seq):\n    for i in range(1, len(seq)):\n        if seq[i - 1] > seq[i]:\n            item = seq[i]\n            index = i\n            while index > 0 and seq[index - 1] > item:\n                seq[index] = seq[index - 1]\n                index -= 1\n            seq[index] = item\n    return seq\n\nprint insert_sort([3, 6, 3, 44, 55, 11])\n```\n\n##### 希尔排序\n\n* 基本思想:\n\n* 时间复杂度:\n\n* 算法实现:\n\n```\n```\n\n##### 归并排序\n\n* 基本思想:\n\n* 时间复杂度:\n\n* 算法实现:\n\n```\n```\n\n##### 堆排序\n\n* 基本思想:\n\n* 时间复杂度:\n\n* 算法实现:\n\n```\n```\n\n##### 基数排序\n\n* 基本思想:\n\n* 时间复杂度:\n\n* 算法实现:\n\n```\n```\n","source":"_posts/python_sort.md","raw":"layout: sort_layout\ntitle: Python 实现八大排序\ndate: 2017-05-24 18:16:05\ntags: 重点\ncomments: true\ncategories: Python\n\n---\n### 排序算法\n\n* 各种排序算法\n![](https://martin-upload.b0.upaiyun.com/web/2017/05/4097d5d86145141fcb6a5ecff0fbc3bc.jpg)\n\n* 各种排序算法比较\n![](https://martin-upload.b0.upaiyun.com/web/2017/05/746fe11d81c35fc57bb2b8ba17be65c5.jpg)\n\n##### 冒泡排序\n\n* 基本思想:\n\n    > 在要排序的一组数中, 对当前还未排好序的范围内的全部数, 自上而下对相邻的两个数依次进行比较和调整, 让较大的数往下沉, 较小的往上冒.\n    > 即:每当两相邻的数比较后发现它们的排序与排序要求相反时, 就将它们互换.\n\n* 算法实现:\n\n```python\ndef bubble_sort(seq):\n    for i, item_i in enumerate(seq):\n        for j, item_j in enumerate(seq):\n            if item_j > item_i:\n                seq[i], seq[j] = seq[j], seq[i]\n    return seq\n\nprint bubble_sort([3, 6, 3, 44, 55, 11])\n```\n\n##### 快速排序\n\n* 基本思想:\n\n    > 通过一趟排序将要排序的数据分割成独立的两部分, 其中一部分的所有数据都比另外一部分的所有数据都要小, \n    > 然后再按此方法对这两部分数据分别进行快速排序, 整个排序过程可以递归进行，以此达到整个数据变成有序序列.\n\n* 算法实现:\n\n```python\ndef quick_sort(seq, start_i, end_j):\n    start = start_i\n    end = end_j\n    if start >= end:\n        return seq\n    start_item = seq[start]\n    while start < end:\n        while start < end and seq[end] >= start_item:\n            end -= 1\n        seq[start] = seq[end]\n        while start < end and seq[start] <= start_item:\n            start += 1\n        seq[end] = seq[start]\n    seq[start] = start_item\n    quick_sort(seq, start_i, start - 1)\n    quick_sort(seq, end + 1, end_j)\n    return seq\n\nprint quick_sort([3, 6, 3, 44, 55, 11], 0, 5)\n```\n\n##### 简单选择排序\n\n* 基本思想: \n    > 选择排序也是一种简单直观的排序算法.它的工作原理很容易理解:首先在未排序序列中找到最小（大）元素, 存放到排序序列的起始位置;\n    > 然后,再从剩余未排序元素中继续寻找最小（大）元素, 放到已排序序列的末尾. 以此类推，直到所有元素均排序完毕.\n\n* 算法实现:\n\n```python\ndef select_sort(seq):\n    for i in xrange(len(seq)):\n        min_item = seq[i]\n        min_j = i\n        for j, item in enumerate(seq[i:]):\n            if item <= min_item:\n                min_item = item\n                min_j = j\n        if min_j + i != i:\n            seq[min_j + i], seq[i] = seq[i], seq[min_j + i]\n    return seq\n\nprint select_sort([3, 6, 3, 44, 55, 11])\n```\n\n\n##### 直接插入排序\n\n* 基本思想:\n    > 从第一个元素开始, 该元素可以认为已经被排序\n    > 取出下一个元素, 在已经排序的元素序列中从后向前扫描, 找到已排序的元素小于或者等于新元素的位置, 将新元素插入到该位置后\n    > 重复以上步骤, 直到排序完成\n\n* 算法实现:\n\n```python\ndef insert_sort(seq):\n    for i in range(1, len(seq)):\n        if seq[i - 1] > seq[i]:\n            item = seq[i]\n            index = i\n            while index > 0 and seq[index - 1] > item:\n                seq[index] = seq[index - 1]\n                index -= 1\n            seq[index] = item\n    return seq\n\nprint insert_sort([3, 6, 3, 44, 55, 11])\n```\n\n##### 希尔排序\n\n* 基本思想:\n\n* 时间复杂度:\n\n* 算法实现:\n\n```\n```\n\n##### 归并排序\n\n* 基本思想:\n\n* 时间复杂度:\n\n* 算法实现:\n\n```\n```\n\n##### 堆排序\n\n* 基本思想:\n\n* 时间复杂度:\n\n* 算法实现:\n\n```\n```\n\n##### 基数排序\n\n* 基本思想:\n\n* 时间复杂度:\n\n* 算法实现:\n\n```\n```\n","slug":"python_sort","published":1,"updated":"2017-06-05T11:04:47.452Z","photos":[],"link":"","_id":"cj3l060y2000mnzy6p3d2tun9","content":"<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><ul>\n<li><p>各种排序算法<br><img src=\"https://martin-upload.b0.upaiyun.com/web/2017/05/4097d5d86145141fcb6a5ecff0fbc3bc.jpg\" alt=\"\"></p>\n</li>\n<li><p>各种排序算法比较<br><img src=\"https://martin-upload.b0.upaiyun.com/web/2017/05/746fe11d81c35fc57bb2b8ba17be65c5.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h5><ul>\n<li><p>基本思想:</p>\n<blockquote>\n<p>在要排序的一组数中, 对当前还未排好序的范围内的全部数, 自上而下对相邻的两个数依次进行比较和调整, 让较大的数往下沉, 较小的往上冒.<br>即:每当两相邻的数比较后发现它们的排序与排序要求相反时, 就将它们互换.</p>\n</blockquote>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(seq)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i, item_i <span class=\"keyword\">in</span> enumerate(seq):</div><div class=\"line\">        <span class=\"keyword\">for</span> j, item_j <span class=\"keyword\">in</span> enumerate(seq):</div><div class=\"line\">            <span class=\"keyword\">if</span> item_j &gt; item_i:</div><div class=\"line\">                seq[i], seq[j] = seq[j], seq[i]</div><div class=\"line\">    <span class=\"keyword\">return</span> seq</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> bubble_sort([<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>])</div></pre></td></tr></table></figure>\n<h5 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h5><ul>\n<li><p>基本思想:</p>\n<blockquote>\n<p>通过一趟排序将要排序的数据分割成独立的两部分, 其中一部分的所有数据都比另外一部分的所有数据都要小,<br>然后再按此方法对这两部分数据分别进行快速排序, 整个排序过程可以递归进行，以此达到整个数据变成有序序列.</p>\n</blockquote>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(seq, start_i, end_j)</span>:</span></div><div class=\"line\">    start = start_i</div><div class=\"line\">    end = end_j</div><div class=\"line\">    <span class=\"keyword\">if</span> start &gt;= end:</div><div class=\"line\">        <span class=\"keyword\">return</span> seq</div><div class=\"line\">    start_item = seq[start]</div><div class=\"line\">    <span class=\"keyword\">while</span> start &lt; end:</div><div class=\"line\">        <span class=\"keyword\">while</span> start &lt; end <span class=\"keyword\">and</span> seq[end] &gt;= start_item:</div><div class=\"line\">            end -= <span class=\"number\">1</span></div><div class=\"line\">        seq[start] = seq[end]</div><div class=\"line\">        <span class=\"keyword\">while</span> start &lt; end <span class=\"keyword\">and</span> seq[start] &lt;= start_item:</div><div class=\"line\">            start += <span class=\"number\">1</span></div><div class=\"line\">        seq[end] = seq[start]</div><div class=\"line\">    seq[start] = start_item</div><div class=\"line\">    quick_sort(seq, start_i, start - <span class=\"number\">1</span>)</div><div class=\"line\">    quick_sort(seq, end + <span class=\"number\">1</span>, end_j)</div><div class=\"line\">    <span class=\"keyword\">return</span> seq</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> quick_sort([<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>], <span class=\"number\">0</span>, <span class=\"number\">5</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h5><ul>\n<li><p>基本思想: </p>\n<blockquote>\n<p>选择排序也是一种简单直观的排序算法.它的工作原理很容易理解:首先在未排序序列中找到最小（大）元素, 存放到排序序列的起始位置;<br>然后,再从剩余未排序元素中继续寻找最小（大）元素, 放到已排序序列的末尾. 以此类推，直到所有元素均排序完毕.</p>\n</blockquote>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span><span class=\"params\">(seq)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(len(seq)):</div><div class=\"line\">        min_item = seq[i]</div><div class=\"line\">        min_j = i</div><div class=\"line\">        <span class=\"keyword\">for</span> j, item <span class=\"keyword\">in</span> enumerate(seq[i:]):</div><div class=\"line\">            <span class=\"keyword\">if</span> item &lt;= min_item:</div><div class=\"line\">                min_item = item</div><div class=\"line\">                min_j = j</div><div class=\"line\">        <span class=\"keyword\">if</span> min_j + i != i:</div><div class=\"line\">            seq[min_j + i], seq[i] = seq[i], seq[min_j + i]</div><div class=\"line\">    <span class=\"keyword\">return</span> seq</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> select_sort([<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>])</div></pre></td></tr></table></figure>\n<h5 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h5><ul>\n<li><p>基本思想:</p>\n<blockquote>\n<p>从第一个元素开始, 该元素可以认为已经被排序<br>取出下一个元素, 在已经排序的元素序列中从后向前扫描, 找到已排序的元素小于或者等于新元素的位置, 将新元素插入到该位置后<br>重复以上步骤, 直到排序完成</p>\n</blockquote>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(seq)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(seq)):</div><div class=\"line\">        <span class=\"keyword\">if</span> seq[i - <span class=\"number\">1</span>] &gt; seq[i]:</div><div class=\"line\">            item = seq[i]</div><div class=\"line\">            index = i</div><div class=\"line\">            <span class=\"keyword\">while</span> index &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> seq[index - <span class=\"number\">1</span>] &gt; item:</div><div class=\"line\">                seq[index] = seq[index - <span class=\"number\">1</span>]</div><div class=\"line\">                index -= <span class=\"number\">1</span></div><div class=\"line\">            seq[index] = item</div><div class=\"line\">    <span class=\"keyword\">return</span> seq</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> insert_sort([<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>])</div></pre></td></tr></table></figure>\n<h5 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h5><ul>\n<li><p>基本思想:</p>\n</li>\n<li><p>时间复杂度:</p>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\"></div><div class=\"line\">##### 归并排序</div><div class=\"line\"></div><div class=\"line\">* 基本思想:</div><div class=\"line\"></div><div class=\"line\">* 时间复杂度:</div><div class=\"line\"></div><div class=\"line\">* 算法实现:</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">##### 堆排序</div><div class=\"line\"></div><div class=\"line\">* 基本思想:</div><div class=\"line\"></div><div class=\"line\">* 时间复杂度:</div><div class=\"line\"></div><div class=\"line\">* 算法实现:</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">##### 基数排序</div><div class=\"line\"></div><div class=\"line\">* 基本思想:</div><div class=\"line\"></div><div class=\"line\">* 时间复杂度:</div><div class=\"line\"></div><div class=\"line\">* 算法实现:</div></pre></td></tr></table></figure>\n<p>```</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"排序算法\"><a href=\"#排序算法\" class=\"headerlink\" title=\"排序算法\"></a>排序算法</h3><ul>\n<li><p>各种排序算法<br><img src=\"https://martin-upload.b0.upaiyun.com/web/2017/05/4097d5d86145141fcb6a5ecff0fbc3bc.jpg\" alt=\"\"></p>\n</li>\n<li><p>各种排序算法比较<br><img src=\"https://martin-upload.b0.upaiyun.com/web/2017/05/746fe11d81c35fc57bb2b8ba17be65c5.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h5><ul>\n<li><p>基本思想:</p>\n<blockquote>\n<p>在要排序的一组数中, 对当前还未排好序的范围内的全部数, 自上而下对相邻的两个数依次进行比较和调整, 让较大的数往下沉, 较小的往上冒.<br>即:每当两相邻的数比较后发现它们的排序与排序要求相反时, 就将它们互换.</p>\n</blockquote>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubble_sort</span><span class=\"params\">(seq)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i, item_i <span class=\"keyword\">in</span> enumerate(seq):</div><div class=\"line\">        <span class=\"keyword\">for</span> j, item_j <span class=\"keyword\">in</span> enumerate(seq):</div><div class=\"line\">            <span class=\"keyword\">if</span> item_j &gt; item_i:</div><div class=\"line\">                seq[i], seq[j] = seq[j], seq[i]</div><div class=\"line\">    <span class=\"keyword\">return</span> seq</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> bubble_sort([<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>])</div></pre></td></tr></table></figure>\n<h5 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h5><ul>\n<li><p>基本思想:</p>\n<blockquote>\n<p>通过一趟排序将要排序的数据分割成独立的两部分, 其中一部分的所有数据都比另外一部分的所有数据都要小,<br>然后再按此方法对这两部分数据分别进行快速排序, 整个排序过程可以递归进行，以此达到整个数据变成有序序列.</p>\n</blockquote>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">quick_sort</span><span class=\"params\">(seq, start_i, end_j)</span>:</span></div><div class=\"line\">    start = start_i</div><div class=\"line\">    end = end_j</div><div class=\"line\">    <span class=\"keyword\">if</span> start &gt;= end:</div><div class=\"line\">        <span class=\"keyword\">return</span> seq</div><div class=\"line\">    start_item = seq[start]</div><div class=\"line\">    <span class=\"keyword\">while</span> start &lt; end:</div><div class=\"line\">        <span class=\"keyword\">while</span> start &lt; end <span class=\"keyword\">and</span> seq[end] &gt;= start_item:</div><div class=\"line\">            end -= <span class=\"number\">1</span></div><div class=\"line\">        seq[start] = seq[end]</div><div class=\"line\">        <span class=\"keyword\">while</span> start &lt; end <span class=\"keyword\">and</span> seq[start] &lt;= start_item:</div><div class=\"line\">            start += <span class=\"number\">1</span></div><div class=\"line\">        seq[end] = seq[start]</div><div class=\"line\">    seq[start] = start_item</div><div class=\"line\">    quick_sort(seq, start_i, start - <span class=\"number\">1</span>)</div><div class=\"line\">    quick_sort(seq, end + <span class=\"number\">1</span>, end_j)</div><div class=\"line\">    <span class=\"keyword\">return</span> seq</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> quick_sort([<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>], <span class=\"number\">0</span>, <span class=\"number\">5</span>)</div></pre></td></tr></table></figure>\n<h5 id=\"简单选择排序\"><a href=\"#简单选择排序\" class=\"headerlink\" title=\"简单选择排序\"></a>简单选择排序</h5><ul>\n<li><p>基本思想: </p>\n<blockquote>\n<p>选择排序也是一种简单直观的排序算法.它的工作原理很容易理解:首先在未排序序列中找到最小（大）元素, 存放到排序序列的起始位置;<br>然后,再从剩余未排序元素中继续寻找最小（大）元素, 放到已排序序列的末尾. 以此类推，直到所有元素均排序完毕.</p>\n</blockquote>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">select_sort</span><span class=\"params\">(seq)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> xrange(len(seq)):</div><div class=\"line\">        min_item = seq[i]</div><div class=\"line\">        min_j = i</div><div class=\"line\">        <span class=\"keyword\">for</span> j, item <span class=\"keyword\">in</span> enumerate(seq[i:]):</div><div class=\"line\">            <span class=\"keyword\">if</span> item &lt;= min_item:</div><div class=\"line\">                min_item = item</div><div class=\"line\">                min_j = j</div><div class=\"line\">        <span class=\"keyword\">if</span> min_j + i != i:</div><div class=\"line\">            seq[min_j + i], seq[i] = seq[i], seq[min_j + i]</div><div class=\"line\">    <span class=\"keyword\">return</span> seq</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> select_sort([<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>])</div></pre></td></tr></table></figure>\n<h5 id=\"直接插入排序\"><a href=\"#直接插入排序\" class=\"headerlink\" title=\"直接插入排序\"></a>直接插入排序</h5><ul>\n<li><p>基本思想:</p>\n<blockquote>\n<p>从第一个元素开始, 该元素可以认为已经被排序<br>取出下一个元素, 在已经排序的元素序列中从后向前扫描, 找到已排序的元素小于或者等于新元素的位置, 将新元素插入到该位置后<br>重复以上步骤, 直到排序完成</p>\n</blockquote>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insert_sort</span><span class=\"params\">(seq)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, len(seq)):</div><div class=\"line\">        <span class=\"keyword\">if</span> seq[i - <span class=\"number\">1</span>] &gt; seq[i]:</div><div class=\"line\">            item = seq[i]</div><div class=\"line\">            index = i</div><div class=\"line\">            <span class=\"keyword\">while</span> index &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> seq[index - <span class=\"number\">1</span>] &gt; item:</div><div class=\"line\">                seq[index] = seq[index - <span class=\"number\">1</span>]</div><div class=\"line\">                index -= <span class=\"number\">1</span></div><div class=\"line\">            seq[index] = item</div><div class=\"line\">    <span class=\"keyword\">return</span> seq</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> insert_sort([<span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">11</span>])</div></pre></td></tr></table></figure>\n<h5 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h5><ul>\n<li><p>基本思想:</p>\n</li>\n<li><p>时间复杂度:</p>\n</li>\n<li><p>算法实现:</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\"></div><div class=\"line\">##### 归并排序</div><div class=\"line\"></div><div class=\"line\">* 基本思想:</div><div class=\"line\"></div><div class=\"line\">* 时间复杂度:</div><div class=\"line\"></div><div class=\"line\">* 算法实现:</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">##### 堆排序</div><div class=\"line\"></div><div class=\"line\">* 基本思想:</div><div class=\"line\"></div><div class=\"line\">* 时间复杂度:</div><div class=\"line\"></div><div class=\"line\">* 算法实现:</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">##### 基数排序</div><div class=\"line\"></div><div class=\"line\">* 基本思想:</div><div class=\"line\"></div><div class=\"line\">* 时间复杂度:</div><div class=\"line\"></div><div class=\"line\">* 算法实现:</div></pre></td></tr></table></figure>\n<p>```</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3l060xq0009nzy6k832zu9v","category_id":"cj3l060xd0005nzy6fbx8ql5a","_id":"cj3l060xy000fnzy6epb420dh"},{"post_id":"cj3l060wk0001nzy6w9tcp15s","category_id":"cj3l060xd0005nzy6fbx8ql5a","_id":"cj3l060y2000knzy6q4mmlie7"},{"post_id":"cj3l060xs000anzy6q13ufn6s","category_id":"cj3l060xd0005nzy6fbx8ql5a","_id":"cj3l060y5000nnzy6lf80qwnw"},{"post_id":"cj3l060x80003nzy63uw8kowr","category_id":"cj3l060xd0005nzy6fbx8ql5a","_id":"cj3l060y6000rnzy6z5sxfqxv"},{"post_id":"cj3l060xz000hnzy6eisxvfwh","category_id":"cj3l060xd0005nzy6fbx8ql5a","_id":"cj3l060y7000tnzy67wm4yfep"},{"post_id":"cj3l060y2000mnzy6p3d2tun9","category_id":"cj3l060xd0005nzy6fbx8ql5a","_id":"cj3l060y7000vnzy6f54tir79"},{"post_id":"cj3l060xg0007nzy65lazzowb","category_id":"cj3l060y0000inzy68kj6lugk","_id":"cj3l060y8000xnzy67rgato87"},{"post_id":"cj3l060xx000enzy6q837a2h6","category_id":"cj3l060y6000qnzy656kj76bf","_id":"cj3l060yc000znzy69xikza4v"}],"PostTag":[{"post_id":"cj3l060wk0001nzy6w9tcp15s","tag_id":"cj3l060xf0006nzy683lljibk","_id":"cj3l060xx000dnzy6loys5q56"},{"post_id":"cj3l060xs000anzy6q13ufn6s","tag_id":"cj3l060xf0006nzy683lljibk","_id":"cj3l060xy000gnzy6pm6fkd0z"},{"post_id":"cj3l060xx000enzy6q837a2h6","tag_id":"cj3l060xf0006nzy683lljibk","_id":"cj3l060y2000lnzy66y0xs017"},{"post_id":"cj3l060x80003nzy63uw8kowr","tag_id":"cj3l060xf0006nzy683lljibk","_id":"cj3l060y5000onzy60c66aeo4"},{"post_id":"cj3l060xz000hnzy6eisxvfwh","tag_id":"cj3l060xf0006nzy683lljibk","_id":"cj3l060y6000snzy6q7zy62kr"},{"post_id":"cj3l060y2000mnzy6p3d2tun9","tag_id":"cj3l060xf0006nzy683lljibk","_id":"cj3l060y7000unzy6wl2nka4x"},{"post_id":"cj3l060xg0007nzy65lazzowb","tag_id":"cj3l060xf0006nzy683lljibk","_id":"cj3l060y7000wnzy6bs8wc168"},{"post_id":"cj3l060xq0009nzy6k832zu9v","tag_id":"cj3l060y5000pnzy6k1vaf8z6","_id":"cj3l060y8000ynzy6zk7nsqpi"}],"Tag":[{"name":"重点","_id":"cj3l060xf0006nzy683lljibk"},{"name":"普通","_id":"cj3l060y5000pnzy6k1vaf8z6"}]}}